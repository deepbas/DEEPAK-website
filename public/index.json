[{"authors":null,"categories":null,"content":"Deepak Bastola is a visiting assistant professor of statistics at Carleton College. His research interests include bayesian statistics, time series methodology, and statistical computation.\n  Download my resum√©.\n","date":1554595200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1567641600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://deepbas.netlify.app/author/deepak-bastola/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/deepak-bastola/","section":"authors","summary":"Deepak Bastola is a visiting assistant professor of statistics at Carleton College. His research interests include bayesian statistics, time series methodology, and statistical computation.\n  Download my resum√©.","tags":null,"title":"Deepak Bastola","type":"authors"},{"authors":null,"categories":null,"content":"Âê≥ÊÅ©ÈÅî is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"da99cb196019cc5857b9b3e950397ca9","permalink":"https://deepbas.netlify.app/author/%E5%90%B3%E6%81%A9%E9%81%94/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/%E5%90%B3%E6%81%A9%E9%81%94/","section":"authors","summary":"Âê≥ÊÅ©ÈÅî is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Âê≥ÊÅ©ÈÅî","type":"authors"},{"authors":null,"categories":null,"content":"   Table of Contents  What you will learn Course overview Learning Objectives Course Requirements Meet your instructor    What you will learn  Data wrangling and formatting Using the tidyverse set of libraries Exploratory data analysis including data visualization using ggplot2 Data acquisition using web-scraping and APIs Statistical learning basics of supervised and unsupervised learning Text mining and language processing Reproducible research and dynamic programming using R/RStudio/RShiny  Course overview Welcome to introduction to data science! This course will cover the computational side of data analysis, including data acquisition, management, and visualization tools. The course introduces principles of data-scientific, reproducible research and dynamic programming using the R/RStudio ecosystem.\nIf you took Stat 120, 230, or 250 at Carleton, then you are in good shape. It is essential to recap your basic R and R-markdown skills by the first week of the class. Specifically, I expect that everyone can load a data set into R, calculate basic summary statistics, and create basic exploratory data analysis. I will expose you to Git and GitHub version control in the first week of the class and prior exposure to these is not required.\nLearning Objectives  Develop research questions that can be answered by data. Import/scrape data into R and reshape it to the form necessary for analysis. Manipulate common types of data, including numeric, categorical (factors), text, date-times, geo-location variables in order to provide insight into your data and facilitate analysis. Explore data using both graphical and numeric methods to provide insight and uncover relationships/patterns. Utilize fundamental programming concepts such as iteration, conditional execution, and functions to streamline your code. Build, tune, use, and evaluate basic statistical learning models to uncover clusters and classify observations. Draw informed conclusions from your data and communicate your findings using both written and interactive platforms.  Course Requirements  Group Assignments (5%) Individual assignments (20%) Paired projects (10%) Midterm Exams (45%) Final Project (25%)  VIEW THE SYLLABUS\nMeet your instructor Deepak Bastola ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"206634b0871fe67b6eec133296b05e90","permalink":"https://deepbas.netlify.app/courses/stat220/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/courses/stat220/","section":"courses","summary":"A course focusing on the computational side of data analysis","tags":null,"title":"üìä STAT 220: Introduction to Data Science","type":"book"},{"authors":null,"categories":null,"content":"Do‚Äôs and Don‚Äôt of collaboration for group assignments  All group members should contribute to each question. Don‚Äôt delegate questions among group members. If a group member didn‚Äôt contribute sufficiently to an assignment, please let me know via email. If you aren‚Äôt able to contribute sufficiently to an assignment, please send me an email explaining your situation. An isolated ‚Äúmiss‚Äù of group work due to personal issues is understandable, but you will lose points from your (individual) group grade if I see a pattern of multiple misses without a reasonable explanation.  Do‚Äôs and Don‚Äôt of collaboration for individual assignments  You can discuss homework problems with classmates but you must write up your own homework solutions and do your own work in R (no sharing commands or output).  Do not share R commands/code in any way, including, but not limited to, sending commands via email, slack, text, or showing commands in a shared screen with the intention of showing a classmate your solution to a problem. You can share a screen to help troubleshoot a coding problem in R.   You can use the following resources to complete your homework:  Carleton faculty (myself, other math fac, etc) discussions with classmates (see above) or knowledgeable friends Carleton resources like stats lab assistants student solutions provided in the back of your student textbook or in the student solution manual.   You cannot use any resources other than the ones listed above to complete assignments (homework, reports, etc) for this class. (e.g. you cannot use a friend‚Äôs old assignments or reports, answers found on the internet, textbook (instructor) solutions manual, etc.)  Examples that violate the academic integrity policy  sending your .Rmd homework file to another person in the class receiving an .Rmd homework file from another person sharing a screen and copying code, verbatim, from another person sending/receiving R commands neglecting to acknowledge classmates with whom you worked with on an assignment  Format and Content Submit via GitHub (for most assignments) an organized and correctly ordered assignment.\n Content: Good data scientists need to do more than just write code; they should be able to interpret and explain their analyzes.  Provide a written answer first, followed by any required R code and output. Use complete sentences when answering any problem that requires an explanation or overall problem summary.   When including code:  Be sure to show the natural sequence of work needed to answer the problem. Include brief comments explain your code steps. Do not include typos or unnecessary commands/output. Always include code output.   At the top of each individual assignment include the names of classmates that you worked with on all or part of the assignment (but each person must write up their assignment on their own)   Disability Accommodations: Carleton College is committed to providing equitable access to learning opportunities for all students. The Disability Services office (Henry House, 107 Union Street) is the campus office that collaborates with students who have disabilities to provide and/or arrange reasonable accommodations. If you have, or think you may have, a disability (e.g., mental health, attentional, learning, autism spectrum disorders, chronic health, traumatic brain injury and concussions, vision, hearing, mobility, or speech impairments), please contact disability@carleton.edu or call Sam Thayer (‚Äô10), Accessibility Specialist (x4464) or Chris Dallager, Director of Disability Services (x5250) to arrange a confidential discussion regarding equitable access and reasonable accommodations.\nAcademic Honesty: All work that you turn in under your name must follow Carleton‚Äôs academic integrity policy. The use of textbook solution manuals (physical or online solutions), homework, reports or exams done by past students are not allowed. Look at the College‚Äôs Writing Across the Curriculum website for additional guidance on plagiarism and how to avoid plagiarism in their writing.\n","date":1641340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641340800,"objectID":"4513a40e7e6396766663a099b861976b","permalink":"https://deepbas.netlify.app/courses/stat220/homework-in-stat-220/","publishdate":"2022-01-05T00:00:00Z","relpermalink":"/courses/stat220/homework-in-stat-220/","section":"courses","summary":"Do‚Äôs and Don‚Äôt of collaboration for group assignments  All group members should contribute to each question. Don‚Äôt delegate questions among group members. If a group member didn‚Äôt contribute sufficiently to an assignment, please let me know via email.","tags":null,"title":"Assignments in Stat 220","type":"book"},{"authors":null,"categories":null,"content":"Overview If you are using the maize RStudio server, then you can connect to GitHub without any extra software downloads. If you are using RStudio on your computer, then you will need to download Git software (as directed in Software in Stat 220) to use GitHub connected projects.\nI will host all of our course materials on GitHub, and you will use GitHub to submit homework and collaborate on projects.\nGetting setup with Git and GitHub If you are not working on the maize RStudio server, then make sure that you have installed all of the software mentioned in Software in Stat 220. In addition, you should install the usethis and gitcreds R packages.\nEveryone needs to connect Git and GitHub by doing the following:\n  Register for account on GitHub (https://github.com/). I recommend using a username that incorporates your name (e.g., dbastola). Please use your Carleton email with this account.\n  Setup options in Git by running the following code chunk in your console:\nlibrary(usethis) use_git_config(user.name = \u0026quot;Jane Doe\u0026quot;, user.email = \u0026quot;jane@example.org\u0026quot;)  changing the first two lines to your own name and email (this should be the email associated with your GitHub account).\n  (Optional) This step explains how to use GitHub on RStudio without having to enter your password every time to connect. This is an optional step since you can still use GitHub without setting up a SSH key or caching credentials, you will just need to enter your password every time you push or pull with GitHub. Pick one method below: cache credentials for HTTPS or SSH. GitHub recommends HTTPS, so I recommend trying that first.\n  Strongly recommended: Cache credential using a HTTPS linked project.\nComplete the steps in Section 10.1 of Happy Git with R to get a personal access token (you will need to install the usethis package first). Then, follow the directions in Section 10.2.1 of Happy Git with R (I\u0026rsquo;ve had good luck with the gitcreds package, and it is installed on maize.)\n  A second method is to generate a SSH key. First check to see if you have a SSH key. Go into the shell (again, through RStudio Tools -\u0026gt; Shell) and complete on this page http://happygitwithr.com/ssh-keys.html, which is Chapter 11 in Happy Git with R.\n    (optional) Follow the instructions here (http://happygitwithr.com/push-pull-github.html) to ensure you can connect to GitHub from your computer. If you can\u0026rsquo;t get this command line push/pull to work that is fine. Try connecting to GitHub via RStudio, as detailed next. If you can\u0026rsquo;t connect via RStudio then talk to me in student hours.\n  Individual assignments If you followed the suggestions in the Using Rstudio in Stat 220 page, then you should already have an assignments folder on your computer or maize account.\nEach new assignment/project will be posted as a repository on GitHub and added directly to your account (within the Stat220 organization). This repository will contain assignment details (README, .Rmd).\nCreating an individual assignment repo and project   Go to our course GitHub organization page (https://github.com/stat220/) and find your homework repo, such as hw-1-username (where your username is attached).\n  Enter the online assignment repository on GitHub. Click the green \u0026ldquo;Code\u0026rdquo; button. Most of you should just use the default setting which is to \u0026ldquo;clone\u0026rdquo; (copy) using HTTPS. Click the clipboard to the right of the URL to copy the repo location. (If you are using SSH, make sure it says \u0026ldquo;Clone with SSH\u0026rdquo; in bold in the top left of the pop-up box. If not, click the \u0026ldquo;SSH\u0026rdquo; button and copy the link in the box to your clipboard.)\n  Now open up RStudio and create a project as follows:\n   Click the Project button in the upper right corner of your RStudio window and select New Project\u0026hellip;.      Select Version Control and then New Project         Paste the link you just copied into the Repository URL box. Leave the Project directory name blank (or keep the auto-filled name). Use the Browse button to find your assignments folder, then click Create Project     Warning: If you received an error in the above steps, you may have to clone with HTTPS instead of SSH (or vice versa). You can do this by again clicking on the \u0026ldquo;Clone or Download\u0026rdquo; button in the repository page, then clicking \u0026ldquo;Use HTTPS\u0026rdquo; in the top right of the pop-up box. Now copy the link and repeat this step.\nWorking on your assignment An RStudio project should now open, which will allow you to start working on your homework assignment. You should see the project assignment name in the top right side of Rstudio. You will probably see a blank console screen when you open a new project. Look in the Files tab for your homework .Rmd file. Click on whatever file you want to edit (probably the .Rmd file) and edit away. Make sure that your current assignment\u0026rsquo;s project is the one open and showing in the upper rightproject name. To open a project, click on the .Rproj file or use the Open Project\u0026hellip; option available in the upper right project link.\nCommits After you make changes to the homework assignment, commit them. What are commits you ask? Commits are essentially taking a snapshot of your projects. Commits save this snapshot to your local version of Git (located on your hard drive or the maize server). For example, if I make changes to a code so that it prints \u0026ldquo;Hello world\u0026rdquo;, and then commit them with an informative message, I can look at the history of my commits and view the code that I wrote at that time. If I made some more changes to the function that resulted in an error, I could go back to the commit where the code was originally working. This prevents you from creating several versions of your homework (homework-v1, homework-v2, \u0026hellip;) or from trying to remember what your code originally looked like.\nYou can make commits in the Git tab in RStudio.\n   Click the Commit button in the Git tab. Check the boxes of the files that you want to commit, enter your commit message (briefly state what changes have been made), then hit Commit. You can read how to do this in RStudio in more detail here: http://r-pkgs.had.co.nz/git.html#git-commit.\nTwo things about committing.\n You should commit somewhat frequently. At minimum, if you\u0026rsquo;re doing a homework assignment, you should make a commit each time that you\u0026rsquo;ve finished a question. Leave informative commit messages. \u0026ldquo;Added stuff\u0026rdquo; will not help you if you\u0026rsquo;re looking at your commit history in a year. A message like \u0026ldquo;Added initial version of hello-world function\u0026rdquo; will be more useful.  Pushing changes to Github At some point you\u0026rsquo;ll want to get the updated version of the assignment back onto GitHub, either so that we can help you with your code or so that it can be graded. You will also want to push work frequently when you have a shared GitHub repo for project collaborations (i.e. more than one person is working on a project and code). If you are ready to push, you can again click on the \u0026ldquo;Up\u0026rdquo; Push arrow in the Git tab or in the Commit pop-up window or in the Git tab (shown above).\nTo \u0026ldquo;turn in\u0026rdquo; an assignment, all you need to do is push all your relevant files to Github by the deadline.\nGroup work Collaborative Github assignments are pretty similar to individual assignments.\nCreating a group/partner assignment repo and project Go to our course GitHub organization page(https://github.com/stat220/) and find the repo for your group, for example if your group name is \u0026ldquo;team01\u0026rdquo; the you might find the mp1-team01 repo. Clone this repo to your computer/maize account using the same steps done for an individual assignment (see steps 2-3).\nWorking with collaborative repos For group homework, I suggest that only the recorder edit the group-homework-x.Rmd file to avoid merge conflicts! Other group members can create a new Markdown doc to run and save commands. Only the recorder needs to push changes (answers) to the Github repo and all others can then pull these changes (i.e. the final answers) after the HW is submitted.\nWhen you are working together on a Github project, you should commit and push your modifications frequently. You will also need to frequently pull updates from Github down to your local version of RStudio. These updates are changes that your teammates have made since your last pull. To pull in changes, click the \u0026ldquo;Down\u0026rdquo; Pull arrow in the Git tab (shown above).\nIf you get an error about conflict after pulling or pushing, don\u0026rsquo;t freak out! This can happen if you edit a file (usually an .Rmd or .R file) in a location that was also changed by a teammate. When this happens you should attempt to fix the merge conflict. Take a look at this resource site and try to fix the merge conflict in Rstudio. Katie also created a diagram shown below that \u0026ldquo;explains\u0026rdquo; how and when conflicts will likely happen and how you can resolve the problems in Rstudio. If that doesn\u0026rsquo;t work contact me!\n   fig:  Additional resources  Happy Git and GitHub for the useR Rstudio, Git and GitHub Interactive learning guide for Git GitHub Guides Git setup for Windows (video) Git setup for Mac (video) How to clone, edit, and push homework assignments with GitHub Classroom (video)  Acknowledgements Most of this content in this guide was taken from https://github.com/jfiksel/github-classroom-for-students and edited for our classroom use.\nReuse This guide is licensed under the CC BY-NC 3.0 Creative Commons License.\n","date":1641340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641340800,"objectID":"32bc61ce2c494b4b91b34a8f3357223f","permalink":"https://deepbas.netlify.app/courses/stat220/github-in-stat-220/","publishdate":"2022-01-05T00:00:00Z","relpermalink":"/courses/stat220/github-in-stat-220/","section":"courses","summary":"Overview If you are using the maize RStudio server, then you can connect to GitHub without any extra software downloads. If you are using RStudio on your computer, then you will need to download Git software (as directed in Software in Stat 220) to use GitHub connected projects.","tags":null,"title":"GitHub Classroom Guide for Students in Stat 220","type":"book"},{"authors":null,"categories":null,"content":"Key points\nThere will be a lot of Rstudio content thrown your way this term, most in the form of .Rmd Markdown files. To stay organized, I strongly suggest you create a stat220 folder that contains the following subfolders:\n stat220 folder   Assignments: This folder will contain subfolders for each assignment. Each assignment subfolder (e.g.¬†homework1, homework2, ‚Ä¶) will be a Github connected RStudio project that you will create once an assignment is posted.\n  Content: This folder should be used to save any non-assignment files (e.g.¬†slides, examples) for this class. You will create this subfolder by creating an RStudio project (see step 5 below).\n    To get started with this organization, follow the steps below.\n File organization: Using maize The server (online) version of Rstudio is run from a unix server. You can navigate this file system using unix commands, but I assume that most or all of you will just use Rstudio to access your files on this server.\n 1. In Rstudio, click the Files tab in the lower right-hand window. Note: this is not the same as the File menu option.      2. Verify that you are in your HOME folder (should simply say Home right under the New Folder button). To navigate to your Home folder (if somehow you are not in it), click the ‚Ä¶ button (far right side of the Files tab) and enter a ~ (tilde) symbol      3. Click the New Folder button and name the folder stat220.      4. Click on this newly created (empty) stat220 folder. Within the folder create another New Folder and name it assignments.       5. Within the stat220 folder, create an RStudio project called content with the following steps:\n a. Click the Project button in the upper righthand corner of your RStudio window and select New Project‚Ä¶.        b. Select New Directory and then New Project         c. Enter content as the Directory name and use the Browse button to find your stat220 folder. Then click Create Project.      d. You should now have a new folder called content in your stat220 folder and this folder will contain an RStudio project .Rproj. Feel free to add subfolders to this content folder (e.g.¬†slides, examples, etc).     Warning: Do not create an RStudio project in the main stat220 folder because it is not good practice to have RStudio projects in subfolders of another project (e.g. a project within a project is not recommended).\n File organization: Using your own Rstudio Create a folder called stat220 somewhere on your computer. Within this folder create an assignments subfolder. Then complete step 5 from above to create a content RStudio project folder.\n RStudio projects Once you‚Äôve created a project, your R session should be running within that project folder. You can check which project you are in by checking the project name in the upper righthand part of your RStudio window. Here we see the content project is open:\n   Running R from an RStudio project sets your working directory to the project folder:\n   This allows for easy file path access to all files related to this project.\nTo start a project, click on the .Rproj file or use the Open Project‚Ä¶ option shown in step 5 above.\n Best practices (or what not to do)  Never save files to a lab computer hard drive (e.g. desktop, downloads, etc). They will be erased when you log off. Do not use gmail as a file storage system! Avoid emailing yourself files that you created (and saved) on a lab computer. Eventually you will lose work this way. Avoid using online versions of google drive and dropbox. Similar to gmail, downloading, editing a doc, then uploading it back to drive/dropbox is another great way to lose work. Avoid this and this.  Acknowledgments This installation guide is based on the guide from Katie St. Clair\nReuse Text and figures are licensed under Creative Commons Attribution CC BY-NC 3.0.\n","date":1641340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641340800,"objectID":"2ed2ef5cf1df124b74e607f04b145ca4","permalink":"https://deepbas.netlify.app/courses/stat220/rstudio-in-stat-220/","publishdate":"2022-01-05T00:00:00Z","relpermalink":"/courses/stat220/rstudio-in-stat-220/","section":"courses","summary":"Key points\nThere will be a lot of Rstudio content thrown your way this term, most in the form of .Rmd Markdown files. To stay organized, I strongly suggest you create a stat220 folder that contains the following subfolders:","tags":null,"title":"Using Rstudio in Stat 220","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://deepbas.netlify.app/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"  R/RStudio The use of the R programming language with the RStudio interface is an essential component of this course. You have two options for using RStudio:\n The server version of RStudio on the web at (https://maize.mathcs.carleton.edu). The advantage of using the server version is that all of your work will be stored in the cloud, where it is automatically saved and backed up. This means that you can access your work from any computer on campus using a web browser. The downside is that you have to share limited computational resources with each other! This limitation is especially pronounced this term when classes are being taught remotely. We are unsure what type of load will be placed on maize, so if you can download a local version of R and RStudio, I recommend you do so. Use your Carleton credentials to access your account and you need to be running the Carleton VPN (below) to access this server.\n A local version of RStudio installed on your machine. This option is highly recommended due to the computational resources this course demands. The downside to this approach is that your work is only stored locally, but I get around this problem by keeping all of my work on GitHub. You will learn how to use GitHub throughout the course. Both R and RStudio are free and open-source.\nInstalling R/RStudio (not needed if you are using the maize server)\n Download the latest version of R: https://cran.r-project.org/\n Download the free Rstudio desktop version: https://www.rstudio.com/products/rstudio/download/\n  Use the default download and install options for each. For R, download the ‚Äúprecompiled binary‚Äù distribution rather than the source code\nUpdating R/RStudio (not needed if you are using the maize server)\nIf you have used a local version of R/RStudio before and it is still installed on your machine, then you should make sure that you have the most recent versions of each program.\n To check your version of R, run the command getRversion() and compare your version to the newest version posted on https://cran.r-project.org/. If you need an update, then install the newer version using the installation directions above.\n In RStudio, check for updates with the menu option Help \u0026gt; Check for updates. Follow directions if an update is needed.\n  Did it work? (A sanity check after your install/update) Do whatever is appropriate for your operating system to launch RStudio. You should get a window similar to the screenshot you see here, but yours will be more boring because you haven‚Äôt written any code or made any figures yet!\nPut your cursor in the pane labeled Console, which is where you interact with the live R process. Create a simple object with code like x \u0026lt;- 2 * 4 (followed by enter or return). Then inspect the x object by typing x followed by enter or return. You should see the value 8 printed. If this happened, you‚Äôve succeeded in installing R and RStudio!\n   Git and GitHub Git is version control software that you install locally on your computer. Git is already installed on the maize RStudio server.\nGithub is a cloud-based service for hosting git projects. It allows multiple users to share and contribute to projects and it is how you will be submitting homework assignments and projects for this class. More information about Github for this class is found in Getting setup with Git and GitHub.\nIf you are using a local install of R/RStudio, then you will need to install Git.\nInstalling Git\nDirections for both Windows \u0026amp; Mac here: http://happygitwithr.com/install-git.html.\n If you are using maize, then there is nothing you need to install.\n Windows users should follow Option 1 in 6.2.\n Mac users can follow Option 1 in 6.3 if comfortable, otherwise follow Option 2\n Linux users can follow 6.4.\n   Slack We will use Slack for all course communication. Sign up for our course Slack team here! You will need to create an account with a username, and log in to read and post. You can download a standalone Slack application to your Mac, Windows, Linux and/or Android/iOS device. You can control whether you receive notifications on new posts by going to Preferences, as well as decide which ‚Äòchannels‚Äô to subscribe to. A ‚Äòchannel‚Äô is a discussion thread, which is used to organize communications into topics. You can learn more about Slack features here.\nSeveral channels have been set up for specific parts of the course. Feel free to ask questions anytime. You can browse the available channels in our team by clicking on ‚ÄúChannels‚Äù on the left-hand panel.\nThere is also an #anonymous channel that you can use if you‚Äôd like to ask a question or provide a comment anonymously. To have a post appear anonymously in this channel, compose a direct message to yourself (by clicking on your username in the ‚ÄòDirect Messages‚Äô menu on the left panel) that begins with /anon #anonymous your question. Then the text your question will be sent to the #anonymous channel by the anonymous bot. Zoom For synchronous class meeting and office hours we will use the Zoom video conferencing software. I recommend downloading the Zoom app for your operating system.\n LaTeX If you want to render R Markdown documents to PDFs, then you need to install LaTeX. Below are the recommended installers for Windows and Mac:\n MacTeX for Mac (3.2GB)\n MiKTeX for Windows (190MB)\n Alternatively, you can install the tinytex R package by running install.packages(\"tinytex\") in the console.\n  If you are using maize, then there is nothing you need to install.\n Acknowledgements This installation guide is based on the guide from Adam Loy.\n Resuse This work is licensed under the CC BY-NC 3.0 Creative Commons License.\n ","date":1641340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641340800,"objectID":"685d99a20c764eab219d9cd094ebadb2","permalink":"https://deepbas.netlify.app/courses/stat220/software/","publishdate":"2022-01-05T00:00:00Z","relpermalink":"/courses/stat220/software/","section":"courses","summary":"R/RStudio The use of the R programming language with the RStudio interface is an essential component of this course. You have two options for using RStudio:\n The server version of RStudio on the web at (https://maize.","tags":null,"title":"Software in Stat 220","type":"courses"},{"authors":null,"categories":["R"],"content":"  R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   ","date":1606875194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606875194,"objectID":"bf1eb249db79f10ace7d22321494165a","permalink":"https://deepbas.netlify.app/2020/12/01/hello-r-markdown/","publishdate":"2020-12-01T21:13:14-05:00","relpermalink":"/2020/12/01/hello-r-markdown/","section":"post","summary":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.","tags":["R Markdown"],"title":"Hello R Markdown","type":"post"},{"authors":null,"categories":null,"content":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you\u0026rsquo;ll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.toml file.\n```python import pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head() ```  renders as\nimport pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head()  Charts Academic supports the popular Plotly chart format.\nSave your Plotly JSON in your page folder, for example chart.json, and then add the {{\u0026lt; chart data=\u0026quot;chart\u0026quot; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\n  (function() { let a = setInterval( function() { if ( typeof window.Plotly === 'undefined' ) { return; } clearInterval( a ); Plotly.d3.json(\"./line-chart.json\", function(chart) { Plotly.plot('chart-358942167', chart.data, chart.layout, {responsive: true}); }); }, 500 ); })();  You might also find the Plotly JSON Editor useful.\nMath Academic supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.toml file.\nTo render inline or block math, wrap your LaTeX math with $...$ or $$...$$, respectively.\nExample math block:\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |} {\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$  renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left |\\nabla F(\\mathbf{x}{n}) - \\nabla F(\\mathbf{x}{n-1}) \\right |^2}$$\nExample inline math $\\nabla F(\\mathbf{x}_{n})$ renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the \\\\\\\\ math linebreak:\n$$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$  renders as\n$$f(k;p_{0}^{}) = \\begin{cases}p_{0}^{} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$\nDiagrams Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ```  renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2]  An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ```  renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good!  An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```  renders as\ngantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d  An example class diagram:\n```mermaid classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } ```  renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() }  An example state diagram:\n```mermaid stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] ```  renders as\nstateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*]  Todo lists You can even write your todo lists in Academic too:\n- [x] Write math example - [x] Write diagram example - [ ] Do something else  renders as\n Write math example Write diagram example Do something else  Tables Represent your data in tables:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |  renders as\n   First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    Callouts Academic supports a shortcode for callouts, also referred to as asides, hints, or alerts. By wrapping a paragraph in {{% callout note %}} ... {{% /callout %}}, it will render as an aside.\n{{% callout note %}} A Markdown aside is useful for displaying notices, hints, or definitions to your readers. {{% /callout %}}  renders as\n A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   Spoilers Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.\n{{\u0026lt; spoiler text=\u0026quot;Click to view the spoiler\u0026quot; \u0026gt;}} You found me! {{\u0026lt; /spoiler \u0026gt;}}  renders as\nClick to view the spoiler You found me!\n Icons Academic enables you to use a wide range of icons from Font Awesome and Academicons in addition to emojis.\nHere are some examples using the icon shortcode to render icons:\n{{\u0026lt; icon name=\u0026quot;terminal\u0026quot; pack=\u0026quot;fas\u0026quot; \u0026gt;}} Terminal {{\u0026lt; icon name=\u0026quot;python\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} Python {{\u0026lt; icon name=\u0026quot;r-project\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} R  renders as\n  Terminal\n Python\n R\nDid you find this page helpful? Consider sharing it üôå ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://deepbas.netlify.app/2019/07/12/writing-technical-content-in-academic/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/2019/07/12/writing-technical-content-in-academic/","section":"post","summary":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Academic","type":"post"},{"authors":["Deepak Bastola"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://deepbas.netlify.app/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Deepak Bastola"],"categories":[],"content":"from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')     print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb  The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post's title date: 2019-09-01 # Put any other Academic metadata here... ---  Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.  Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://deepbas.netlify.app/2019/02/05/display-jupyter-notebooks-with-academic/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/2019/02/05/display-jupyter-notebooks-with-academic/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  **Two**  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://deepbas.netlify.app/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://deepbas.netlify.app/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://deepbas.netlify.app/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Deepak Bastola","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://deepbas.netlify.app/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Deepak Bastola","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://deepbas.netlify.app/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://deepbas.netlify.app/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"  After you have signed up for a GitHub account and gone through all of the account verification steps, you will need to generate a personal access token (PAT) and let R know what that is. To do this, I suggest following these steps:\nSetup options in Git by running the following code chunk in your console:  library(usethis) use_git_config(user.name = \u0026quot;Jane Doe\u0026quot;, user.email = \u0026quot;jane@example.org\u0026quot;) changing the first two lines to your own name and email (this should be the email associated with your GitHub account). Next, you should generate a PAT:  create_github_token() This function will preselect the recommended scopes. I recommend just clicking \u0026quot;Generate token\u0026quot; unless you know of a reason to tweak the scopes. Store this token somewhere, because you‚Äôll never be able to see it again once you leave that page or close the window. Treat this PAT like a password. Now that you have credentials, you need to store them. I recommend using the {gitcreds} package. Run the below chunk (after installing the package if you‚Äôre using your own laptop):  library(gitcreds) gitcreds_set() Respond to the prompt with your personal access token (PAT). You should be setup! Try to clone a GitHub project and talk to me if you still hit issues.  Acknowledgments This installation guide is based on the guide from Adam Loy.\n Reuse This work is is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"55e6948ee3f013088da2f6de7c897909","permalink":"https://deepbas.netlify.app/courses/stat220/pat/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/pat/","section":"courses","summary":"After you have signed up for a GitHub account and gone through all of the account verification steps, you will need to generate a personal access token (PAT) and let R know what that is.","tags":null,"title":"Cache credentials for RStudio and GitHub","type":"courses"}]