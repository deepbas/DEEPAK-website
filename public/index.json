[{"authors":null,"categories":null,"content":"Deepak Bastola here, someone who is deeply passionate about the interplay between statistics and the mysteries of the cosmos. My educational background includes a Ph.D. in Applied Statistics and an M.S. in Astronomy and Astrophysics, both of which have equipped me to delve deeper into my quest for understanding. Throughout this academic path, I\u0026rsquo;ve been fortunate to employ statistical approaches in an effort to better understand astronomical events and to create meaningful data interpretations. My primary research areas are Bayesian statistics, time series methodology, statistical computation, and machine learning.\nDownload my resumÃ©.\n","date":1696636800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1696636800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Deepak Bastola here, someone who is deeply passionate about the interplay between statistics and the mysteries of the cosmos. My educational background includes a Ph.D. in Applied Statistics and an M.","tags":null,"title":"Deepak Bastola","type":"authors"},{"authors":null,"categories":null,"content":"Meet your instructor Deepak Bastola ","date":1672790400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1672790400,"objectID":"08e80848897097ab85e97a023372f8bd","permalink":"/courses/stat120/","publishdate":"2023-01-04T00:00:00Z","relpermalink":"/courses/stat120/","section":"courses","summary":"A first course in statistics","tags":null,"title":"ðŸ“Š STAT 120: Introduction to Statistics","type":"book"},{"authors":null,"categories":null,"content":" Table of Contents What you will learn Course overview Learning Objectives Course Requirements What you will learn Data wrangling and formatting Using the tidyverse set of libraries Exploratory data analysis including data visualization using ggplot2 Data acquisition using web-scraping Statistical learning basics of supervised and unsupervised learning Regular Expression and Text mining Reproducible research and dynamic programming using R/RStudio/RShiny Course overview Welcome to introduction to data science! This course will cover the computational side of data analysis, including data acquisition, management, and visualization tools. The course introduces principles of data-scientific, reproducible research and dynamic programming using the R/RStudio ecosystem.\nIf you took Stat 120, 230, or 250 at Carleton, then you are in good shape. It is essential to recap your basic R and R-markdown skills by the first week of the class. Specifically, I expect that everyone can load a data set into R, calculate basic summary statistics, and create basic exploratory data analysis. I will expose you to Git and GitHub version control in the first week of the class and prior exposure to these is not required.\nLearning Objectives Develop research questions that can be answered by data. Import/scrape data into R and reshape it to the form necessary for analysis. Manipulate common types of data, including numeric, categorical (factors), text, date-times, geo-location variables in order to provide insight into your data and facilitate analysis. Explore data using both graphical and numeric methods to provide insight and uncover relationships/patterns. Utilize fundamental programming concepts such as iteration, conditional execution, and functions to streamline your code. Build, tune, use, and evaluate basic statistical learning models to uncover clusters and classify observations. Draw informed conclusions from your data and communicate your findings using both written and interactive platforms. Course Requirements Class activities (5%) Individual assignments (15%) Paired projects (15%) Midterm Exams (50%) Final Project (15%) ","date":1631232000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1631232000,"objectID":"206634b0871fe67b6eec133296b05e90","permalink":"/courses/stat220/","publishdate":"2021-09-10T00:00:00Z","relpermalink":"/courses/stat220/","section":"courses","summary":"A course focusing on the computational side of data analysis","tags":null,"title":"ðŸ“Š STAT 220: Introduction to Data Science","type":"book"},{"authors":null,"categories":null,"content":"Meet your instructor Deepak Bastola ","date":1616544000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1616544000,"objectID":"e9ff2be4bfb6e5a4a69a669a6fbfbe97","permalink":"/courses/stat230/","publishdate":"2021-03-24T00:00:00Z","relpermalink":"/courses/stat230/","section":"courses","summary":"In depth modeling and application of regression","tags":null,"title":"ðŸ“Š STAT 230: Applied Regression Analysis","type":"book"},{"authors":null,"categories":null,"content":"Day 6 Slides (html)\n","date":1705190400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705190400,"objectID":"7aeff46ae3afd7ba1aec8f7432a8974a","permalink":"/courses/stat120/week3/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week3/","section":"courses","summary":"Day 6 Slides (html)","tags":null,"title":"Week 3","type":"book"},{"authors":null,"categories":null,"content":"Day 6 Slides (html)\n","date":1705190400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705190400,"objectID":"d207397eed9dc38be3242c70a1ec0bb9","permalink":"/courses/stat220/week3/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week3/","section":"courses","summary":"Day 6 Slides (html)","tags":null,"title":"Week 3","type":"book"},{"authors":null,"categories":null,"content":"Day 3 Slides (html)\nDay 4 Slides (html)\nDay 5 Slides (html)\n","date":1704585600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704585600,"objectID":"d0d63021090bd5f394572c48d5c6247d","permalink":"/courses/stat120/week2/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week2/","section":"courses","summary":"Day 3 Slides (html)\nDay 4 Slides (html)\nDay 5 Slides (html)","tags":null,"title":"Week 2","type":"book"},{"authors":null,"categories":null,"content":"Day 3 Slides (html)\nDay 4 Slides (html)\nDay 5 Slides (html)\n","date":1704585600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704585600,"objectID":"f229677111a04328cdaa846757156cc3","permalink":"/courses/stat220/week2/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week2/","section":"courses","summary":"Day 3 Slides (html)\nDay 4 Slides (html)\nDay 5 Slides (html)","tags":null,"title":"Week 2","type":"book"},{"authors":null,"categories":null,"content":"Day 1 Slides (html)\nDay 2 Slides (html)\n","date":1704067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704067200,"objectID":"e234f049dd42d6117f7059542da57c47","permalink":"/courses/stat120/week1/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week1/","section":"courses","summary":"Day 1 Slides (html)\nDay 2 Slides (html)","tags":null,"title":"Week 1","type":"book"},{"authors":null,"categories":null,"content":"Day 1 Slides (html)\nDay 2 Slides (html)\n","date":1704067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704067200,"objectID":"caf90b5615af7388cd73d0d55609001d","permalink":"/courses/stat220/week1/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week1/","section":"courses","summary":"Day 1 Slides (html)\nDay 2 Slides (html)","tags":null,"title":"Week 1","type":"book"},{"authors":null,"categories":null,"content":" ","date":1704067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704067200,"objectID":"706b02d9e6fb8cbcf558735b8872cd32","permalink":"/courses/stat120/week4/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week4/","section":"courses","summary":" ","tags":null,"title":"Week 4","type":"book"},{"authors":null,"categories":null,"content":" ","date":1699747200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1699747200,"objectID":"253a89ab4bc74aae8ad49e7677a32a07","permalink":"/courses/stat120/week10/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week10/","section":"courses","summary":" ","tags":null,"title":"Week 10","type":"book"},{"authors":null,"categories":null,"content":" ","date":1699142400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1699142400,"objectID":"307b83d9836c5f4b8ba99b34ac5b6197","permalink":"/courses/stat120/week9/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week9/","section":"courses","summary":" ","tags":null,"title":"Week 9","type":"book"},{"authors":null,"categories":null,"content":"","date":1698537600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1698537600,"objectID":"c3d2981e29dfaff5248ca8da17c74092","permalink":"/courses/stat120/week8/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week8/","section":"courses","summary":"","tags":null,"title":"Week 8","type":"book"},{"authors":null,"categories":null,"content":"","date":1697932800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1697932800,"objectID":"f2d7c84b0306dd6531b5cd935b966ff4","permalink":"/courses/stat120/week7/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week7/","section":"courses","summary":"","tags":null,"title":"Week 7","type":"book"},{"authors":null,"categories":null,"content":" ","date":1697414400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1697414400,"objectID":"21910e2c2fe678fd76c4361305f5dd01","permalink":"/courses/stat120/week6/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week6/","section":"courses","summary":" ","tags":null,"title":"Week 6","type":"book"},{"authors":null,"categories":null,"content":" ","date":1696723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696723200,"objectID":"7f3b0b14d01f6df4fb3e883d7b37f697","permalink":"/courses/stat120/week5/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat120/week5/","section":"courses","summary":" ","tags":null,"title":"Week 5","type":"book"},{"authors":null,"categories":null,"content":" ","date":1685232000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1685232000,"objectID":"8407b47c96fa1e3d87dbcd9eff3ae924","permalink":"/courses/stat220/week10/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week10/","section":"courses","summary":" ","tags":null,"title":"Week 10","type":"book"},{"authors":null,"categories":null,"content":" ","date":1684627200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684627200,"objectID":"50c41049ef7ec433c630cca69b84f0b0","permalink":"/courses/stat220/week9/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week9/","section":"courses","summary":" ","tags":null,"title":"Week 9","type":"book"},{"authors":null,"categories":null,"content":" ","date":1684022400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684022400,"objectID":"9b40e3fd7e8eb1c68f93476c839c78b8","permalink":"/courses/stat220/week8/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week8/","section":"courses","summary":" ","tags":null,"title":"Week 8","type":"book"},{"authors":null,"categories":null,"content":" ","date":1683417600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1683417600,"objectID":"cbf5e92232f783a5b58c90603a30e169","permalink":"/courses/stat220/week7/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week7/","section":"courses","summary":" ","tags":null,"title":"Week 7","type":"book"},{"authors":null,"categories":null,"content":" ","date":1682812800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682812800,"objectID":"881b312299e43cef9596c3f292defe7b","permalink":"/courses/stat220/week6/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week6/","section":"courses","summary":" ","tags":null,"title":"Week 6","type":"book"},{"authors":null,"categories":null,"content":" ","date":1682208000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682208000,"objectID":"568c73761430176f46860cb3c68a4e66","permalink":"/courses/stat220/week5/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week5/","section":"courses","summary":" ","tags":null,"title":"Week 5","type":"book"},{"authors":null,"categories":null,"content":" ","date":1681257600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681257600,"objectID":"0678af490f47d8b85e40ef819921412b","permalink":"/courses/stat220/week4/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/week4/","section":"courses","summary":" ","tags":null,"title":"Week 4","type":"book"},{"authors":null,"categories":null,"content":"","date":1653782400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653782400,"objectID":"0cefa72e8dee336b39cbbce29c55eb04","permalink":"/courses/stat230/week10/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week10/","section":"courses","summary":"","tags":null,"title":"Week 10","type":"book"},{"authors":null,"categories":null,"content":"Day 24 Slides (pdf/html)\nDay 25 Slides (pdf/html)\nDay 26 Slides (pdf/html)\n","date":1653177600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653177600,"objectID":"66be6a189412328077eabd9f3bd943db","permalink":"/courses/stat230/week9/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week9/","section":"courses","summary":"Day 24 Slides (pdf/html)\nDay 25 Slides (pdf/html)\nDay 26 Slides (pdf/html)","tags":null,"title":"Week 9","type":"book"},{"authors":null,"categories":null,"content":"Day 21 Slides (pdf/html)\nDay 22 Slides (pdf/html)\nDay 23 Slides (pdf/html)\n","date":1652572800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652572800,"objectID":"71cf839bee7f7f0435b05be9bbd158a8","permalink":"/courses/stat230/week8/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week8/","section":"courses","summary":"Day 21 Slides (pdf/html)\nDay 22 Slides (pdf/html)\nDay 23 Slides (pdf/html)","tags":null,"title":"Week 8","type":"book"},{"authors":null,"categories":null,"content":"Day 18 Slides (pdf/html)\nDay 19 Midterm II\nDay 20 Slides (pdf/html)\n","date":1652054400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652054400,"objectID":"d37214898d7a234887b9858163d525e7","permalink":"/courses/stat230/week7/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week7/","section":"courses","summary":"Day 18 Slides (pdf/html)\nDay 19 Midterm II\nDay 20 Slides (pdf/html)","tags":null,"title":"Week 7","type":"book"},{"authors":null,"categories":null,"content":"Midterm Break on Monday 05/02!\nDay 16 Slides (pdf/html)\nDay 17 Slides (pdf/html)\n","date":1651449600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651449600,"objectID":"570fb116342adcc6dbef4741fece8183","permalink":"/courses/stat230/week6/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week6/","section":"courses","summary":"Midterm Break on Monday 05/02!\nDay 16 Slides (pdf/html)\nDay 17 Slides (pdf/html)","tags":null,"title":"Week 6","type":"book"},{"authors":null,"categories":null,"content":"Day 13 Slides (pdf/html)\nDay 14 Slides (pdf/html)\nDay 15 Slides (pdf/html)\n","date":1650844800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650844800,"objectID":"d0a71aa5ff66b24d85cafe34f5e93018","permalink":"/courses/stat230/week5/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week5/","section":"courses","summary":"Day 13 Slides (pdf/html)\nDay 14 Slides (pdf/html)\nDay 15 Slides (pdf/html)","tags":null,"title":"Week 5","type":"book"},{"authors":null,"categories":null,"content":"Day 10 Slides (pdf/html)\nDay 11 Midterm I\nDay 12 Slides (pdf/html)\n","date":1650240000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650240000,"objectID":"c866ad397fa3702519d34124b14599b6","permalink":"/courses/stat230/week4/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week4/","section":"courses","summary":"Day 10 Slides (pdf/html)\nDay 11 Midterm I\nDay 12 Slides (pdf/html)","tags":null,"title":"Week 4","type":"book"},{"authors":null,"categories":null,"content":"Day 7 Slides (pdf/html)\nDay 8 Slides (pdf/html)\nDay 9 Slides (pdf/html)\n","date":1649635200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649635200,"objectID":"4b02bbc11b3b707a13077e6347cc51d7","permalink":"/courses/stat230/week3/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week3/","section":"courses","summary":"Day 7 Slides (pdf/html)\nDay 8 Slides (pdf/html)\nDay 9 Slides (pdf/html)","tags":null,"title":"Week 3","type":"book"},{"authors":null,"categories":null,"content":"Day 4 Slides (pdf/html)\nDay 5 Slides (pdf/html)\nDay 6 Slides (pdf/html)\n","date":1648857600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648857600,"objectID":"78480c4a54a0c32157ecd36ba5afdf63","permalink":"/courses/stat230/week2/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week2/","section":"courses","summary":"Day 4 Slides (pdf/html)\nDay 5 Slides (pdf/html)\nDay 6 Slides (pdf/html)","tags":null,"title":"Week 2","type":"book"},{"authors":null,"categories":null,"content":"Day 1 Slides (pdf/html)\nDay 2 Slides (pdf/html)\nDay 3 Slides (pdf/html)\n","date":1648252800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648252800,"objectID":"3ade9820d006faca63ac14e1b36932e2","permalink":"/courses/stat230/week1/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat230/week1/","section":"courses","summary":"Day 1 Slides (pdf/html)\nDay 2 Slides (pdf/html)\nDay 3 Slides (pdf/html)","tags":null,"title":"Week 1","type":"book"},{"authors":null,"categories":null,"content":"R markdown Cheatsheet\nggplot2 Cheatsheet\ndplyr Cheatsheet\nlubridate Cheatsheet\nstringr Cheatsheet\nregex Cheatsheet\nshiny Cheatsheet\ncaret Cheatsheet\nleaflet Cheatsheet\n","date":1641427200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641427200,"objectID":"5376380bb06df1ead3ca58ff8f84290c","permalink":"/courses/stat220/cheatsheets/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/cheatsheets/","section":"courses","summary":"R markdown Cheatsheet\nggplot2 Cheatsheet\ndplyr Cheatsheet\nlubridate Cheatsheet\nstringr Cheatsheet\nregex Cheatsheet\nshiny Cheatsheet\ncaret Cheatsheet\nleaflet Cheatsheet","tags":null,"title":"Link to cheatsheets","type":"book"},{"authors":null,"categories":null,"content":"Simple Data file\nMedium Data file\nTricky Data file\nMore Tricky Data file\n","date":1641427200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641427200,"objectID":"dccd113fd665dd04fa7ca86a9c0ec59f","permalink":"/courses/stat220/data/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/stat220/data/","section":"courses","summary":"Simple Data file\nMedium Data file\nTricky Data file\nMore Tricky Data file","tags":null,"title":"Link to datasets","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Deepak Bastola"],"categories":["machine learning","data science","prediction"],"content":"The figure below showcases a spectrum integral to exoplanet detection, charting the transit depth against the wavelength in microns. Every observation point in the spectrum carries an inherent uncertainty, denoted by the vertical error bars. To decode and potentially minimize this uncertainty, it\u0026rsquo;s pivotal to fathom how features like planet radius, planet temperature, and the logarithmic concentrations of Hâ‚‚O, COâ‚‚, CO, CHâ‚„, and NHâ‚ƒ influence the transit depth. Leveraging interpretative tools like SHAP can provide insights into how these exoplanetary features impact the observed transit depth, refining our understanding and accuracy in exoplanet spectral analysis.\n# Import required libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from IPython.display import Image Image(filename='my_spectrum.png') # Load the CSV file into a Pandas DataFrame df = pd.read_csv(\u0026quot;small_astro.csv\u0026quot;) df_backup = df.copy() df_backup.head(10) Unnamed: 0 planet_radius planet_temp log_h2o log_co2 log_co log_ch4 log_nh3 x1 x2 ... x43 x44 x45 x46 x47 x48 x49 x50 x51 x52 0 1 0.559620 863.394770 -8.865868 -6.700707 -5.557561 -8.957615 -3.097540 0.003836 0.003834 ... 0.003938 0.003941 0.003903 0.003931 0.003983 0.004019 0.004046 0.004072 0.004054 0.004056 1 2 1.118308 1201.700465 -4.510258 -8.228966 -3.565427 -7.807424 -3.633658 0.015389 0.015148 ... 0.015450 0.015447 0.015461 0.015765 0.016099 0.016376 0.016549 0.016838 0.016781 0.016894 2 3 0.400881 1556.096477 -7.225472 -6.931472 -3.081975 -8.567854 -5.378472 0.002089 0.002073 ... 0.001989 0.002168 0.002176 0.002123 0.002079 0.002081 0.002106 0.002167 0.002149 0.002185 3 4 0.345974 1268.624884 -7.461157 -5.853334 -3.044711 -5.149378 -3.815568 0.002523 0.002392 ... 0.002745 0.003947 0.004296 0.003528 0.003352 0.003629 0.003929 0.004363 0.004216 0.004442 4 5 0.733184 1707.323564 -4.140844 -7.460278 -3.181793 -5.996593 -4.535345 0.002957 0.002924 ... 0.003402 0.003575 0.003667 0.003740 0.003823 0.003904 0.003897 0.004004 0.004111 0.004121 5 6 0.161165 620.185809 -4.875000 -5.074766 -3.861240 -5.388011 -8.390503 0.000444 0.000442 ... 0.000432 0.000486 0.000473 0.000462 0.000447 0.000455 0.000455 0.000457 0.000463 0.000474 6 7 0.194312 900.597575 -8.299899 -6.850709 -4.314491 -3.712038 -3.951455 0.001794 0.001721 ... 0.001048 0.001052 0.000948 0.000976 0.001122 0.001274 0.001395 0.001522 0.001456 0.001823 7 8 1.132685 1176.443900 -6.765865 -7.398548 -3.378307 -3.763737 -5.881384 0.012950 0.012946 ... 0.014019 0.013871 0.013810 0.013902 0.014024 0.014150 0.014298 0.014392 0.014401 0.015042 8 9 0.158621 1189.209841 -8.376041 -6.321977 -3.243900 -8.711851 -3.449195 0.000444 0.000445 ... 0.000562 0.000595 0.000571 0.000590 0.000628 0.000663 0.000692 0.000734 0.000718 0.000736 9 10 0.660642 528.023669 -3.804286 -8.919378 -4.686964 -8.150277 -3.068319 0.008997 0.009035 ... 0.009435 0.009375 0.009315 0.009357 0.009563 0.009739 0.009821 0.009890 0.009819 0.009734 10 rows Ã— 60 columns\n# Columns of interest for planetary and chemical properties and transit depth feature_columns = df.columns[1:8] transit_depth_column = 'x1' # pick the first wavelength # Calculate mean and variance for features and transit depth feature_mean = df[feature_columns].mean() feature_variance = df[feature_columns].var() transit_depth_mean = df[transit_depth_column].mean() transit_depth_variance = df[transit_depth_column].var() # Visualize the distributions fig, axes = plt.subplots(1, 8, figsize=(18, 4)) for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[i]) axes[i].set_title(f'{col}\\nMean: {feature_mean[col]:.2f}\\nVariance: {feature_variance[col]:.2f}') # Add visualization for transit depth sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[-1]) axes[-1].set_title(f'{transit_depth_column}\\nMean: {transit_depth_mean:.2f}\\nVariance: {transit_depth_variance:.2f}') plt.tight_layout() plt.show() feature_mean, feature_variance, transit_depth_mean, transit_depth_variance (planet_radius 0.703714 planet_temp 1073.229674 log_h2o -5.934889 log_co2 -6.873009 log_co -4.497141 log_ch4 -5.799850 log_nh3 -6.051791 dtype: float64, planet_radius 0.198990 planet_temp 154495.743225 log_h2o 3.130868 log_co2 1.649658 log_co 0.738255 log_ch4 3.208283 log_nh3 3.050545 dtype: float64, 0.009442470522591322, 0.00016172106267489707) Exoplanet Feature Distributions The provided visualizations and statistics shed light on the distribution of various exoplanetary features and the observed transit depth at the x1 wavelength.\nPlanet Radius: This feature, with a mean value of approximately 0.7037 and variance of 0.1989, mostly lies between 0.5 and 1.5 as depicted in its histogram.\nPlanet Temperature: Exhibiting a wider spread, the temperature has a mean of approximately 1073.29 K and variance of 154495.74 KÂ².\nLogarithmic Concentrations:\nHâ‚‚O: Mean concentration of -5.93 with a variance of 3.13. COâ‚‚: Mean concentration of -6.87 with a variance of 1.65. CO: Mean concentration of -4.50 with a variance of 0.74. CHâ‚„: Mean concentration of -5.80 with a variance of 3.21. NHâ‚ƒ: Mean concentration of -6.05 with a variance of 3.05. Transit Depth at x1 Wavelength: This depth, crucial for exoplanet detection, has an almost singular value near 0, with a mean of approximately 0.0094 and a negligible variance of 0.00006.\nThese distributions and their accompanying statistics offer invaluable insights into the data\u0026rsquo;s nature and its inherent variability, essential for accurate spectral analysis and interpretation.\n# Import required libraries for modeling and SHAP values import xgboost as xgb import shap # Prepare the feature matrix (X) and the target vector (y) X = df.iloc[:, 1:8] y = df['x1'] # Train an XGBoost model model = xgb.XGBRegressor(objective ='reg:squarederror') model.fit(X, y) # Initialize the SHAP explainer explainer = shap.Explainer(model) # Calculate SHAP values shap_values = explainer(X) # Summary plot for SHAP values shap.summary_plot(shap_values, X, title='Shapley Feature Importance') Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console) SHAP (SHapley Additive exPlanations) values stem from cooperative game theory and provide a way to interpret machine learning model predictions. Each feature in a model is analogous to a player in a game, and the contribution of each feature to a prediction is like the payout a player receives in the game. In SHAP, we calculate the value of each feature by considering all possible combinations (coalitions) of features, assessing the change in prediction with and without that feature. The resulting value, the Shapley value, represents the average contribution of a feature to all possible predictions.\nThe summary plot visualizes these values. Each dot represents a SHAP value for a specific instance of a feature; positive values (right of the centerline) indicate that a feature increases the model\u0026rsquo;s output, while negative values (left of the centerline) suggest a decrease. The color depicts the actual value of the feature for the given instance, enabling a comprehensive view of feature influence across the dataset.\n# Import the Random Forest Regressor and visualization libraries from sklearn.ensemble import RandomForestRegressor # Train a Random Forest model rf_model = RandomForestRegressor(n_estimators=100, random_state=42) rf_model.fit(X, y) # Extract feature importances feature_importances = rf_model.feature_importances_ # Create a DataFrame for visualization importance_df = pd.DataFrame({ 'Feature': feature_columns, 'Importance': feature_importances }).sort_values(by='Importance', ascending=True) # Create a horizontal bar chart for feature importances plt.figure(figsize=(10, 6)) plt.barh(importance_df['Feature'], importance_df['Importance'], color='dodgerblue') plt.xlabel('Importance') plt.ylabel('') plt.title('Random Forest Feature Importance') plt.xticks(fontsize=13) # Increase the font size of the x-axis tick labels plt.yticks(fontsize=14) # Increase the font size of the x-axis tick labels # Save the figure before showing it plt.savefig('random_forest_importance_plot.png', bbox_inches='tight', dpi=300) # 'bbox_inches' ensures the entire plot is saved plt.show() feature_importances array([0.71850575, 0.10367982, 0.01655567, 0.07232808, 0.05603188, 0.0146824 , 0.0182164 ]) Random Forest Feature Importance Analysis To gain insights into which exoplanetary features most influence the observed transit depth, a Random Forest Regressor was utilized. Here\u0026rsquo;s an outline of the procedure:\nModel Initialization: A Random Forest Regressor model was instantiated with 100 trees and a fixed random seed of 42 for reproducibility.\nModel Training: The model was trained on the feature set X and target variable y.\nFeature Importance Extraction: After training, the importance of each feature was extracted using the feature_importances_ attribute of the trained model.\nData Preparation for Visualization: A DataFrame was created to house each feature alongside its respective importance. The features were then sorted in ascending order of importance for better visualization.\nVisualization: A horizontal bar chart was plotted to showcase the importance of each feature. The chart offers a clear visual comparison, with the y-axis representing the features and the x-axis indicating their importance. Special attention was paid to font size adjustments for better readability. Furthermore, before displaying the chart, it was saved as a PNG image with high resolution.\nThe resulting visualization, titled \u0026lsquo;Random Forest Feature Importance\u0026rsquo;, provides a clear understanding of the relative significance of each feature in predicting the transit depth, as discerned by the Random Forest model.\nfrom IPython.display import Image Image(filename='PME.png') PME Feature Importance Analysis Using a modeling technique, the impact of different exoplanetary features on the observed transit depth was assessed, and their importance was visualized in the attached figure titled \u0026lsquo;PME Feature Importance\u0026rsquo;. Here\u0026rsquo;s a breakdown of the visual representation:\nMost Influential Feature: The planet_radius stands out as the most influential feature with the highest PME (Predictive Modeling Estimate) value. This suggests that the radius of the planet plays a pivotal role in determining the observed transit depth.\nOther Features: Logarithmic concentrations of gases, such as log_co2, log_co, log_nh3, log_h2o, and log_ch4, also exhibit varying degrees of importance. Among these, log_co2 and log_co are the more significant contributors compared to others.\nLeast Influential Feature: The planet_temp, representing the temperature of the planet, has the least importance in this analysis, suggesting its minimal role in influencing the transit depth, at least according to the PME metric.\nVisual Clarity: The horizontal bar chart offers a lucid comparison of feature importances. Each bar\u0026rsquo;s length represents the PME value of a feature, providing a direct visual cue to its significance.\nInterpretation: This visualization aids in discerning which exoplanetary characteristics are most relevant when predicting the transit depth using the given model. It can guide future analyses by highlighting key features to focus on or, conversely, those that might be less consequential.\nBy examining the \u0026lsquo;PME Feature Importance\u0026rsquo; chart, one gains a deeper understanding of the relative significance of each feature in predicting the transit depth within this specific modeling context.\nUncertainty Quantification and Feature Reduction in PME Feature Importance Analysis When delving deep into the realms of uncertainty quantification and feature reduction in predictive modeling, it\u0026rsquo;s crucial to evaluate feature importance metrics critically. The provided PME (Predictive Modeling Estimate) Feature Importance Analysis offers a valuable lens for this task. Below is a nuanced exploration of its significance in the described contexts:\nUncertainty Quantification: Origin of Uncertainty:\nIn exoplanetary spectral analysis, uncertainty can arise from observational noise, instrumental errors, or intrinsic variability of the observed phenomena. This uncertainty often manifests in the form of error bars in spectra, like the ones shown in transit depth against wavelengths. Feature Impact on Uncertainty:\nThe degree of influence a feature has on the predicted outcome can be a proxy for how that feature might contribute to the overall predictive uncertainty. If a feature like planet_radius has a high PME value, it might be a critical determinant of transit depth. Any uncertainty in measuring or estimating the planet_radius could propagate and significantly affect the prediction\u0026rsquo;s reliability. PME as a Measure of Stochastic Uncertainty:\nThe PME values themselves might be obtained by analyzing a model\u0026rsquo;s sensitivity to perturbations in input features. A high PME value indicates that slight changes in the feature can lead to notable changes in the output, thereby implying a greater inherent stochastic uncertainty tied to that feature. Feature Reduction: Identifying Critical Features:\nWhen dealing with a multitude of features, not all may be equally relevant. The PME analysis provides a hierarchy of feature importance. In this case, while planet_radius emerges as crucial, planet_temp appears less consequential. This differentiation is fundamental for feature reduction, guiding us on which features to prioritize in modeling. Reducing Dimensionality \u0026amp; Complexity:\nIn data-driven modeling, especially with limited data points, overfitting is a genuine concern. By understanding which features significantly influence the predictions (like planet_radius or log_co2), one can potentially reduce the model\u0026rsquo;s complexity and the risk of overfitting by focusing only on these paramount features. Informing Experimental Design:\nIf further observational or experimental data is required, knowing feature importances can guide where resources are channeled. For instance, more precise measurements might be sought for features with high PME values, as their accurate estimation is vital for reliable predictions. Trade-off with Predictive Performance:\nIt\u0026rsquo;s essential to understand that while feature reduction can simplify models and make them more interpretable, there\u0026rsquo;s always a trade-off with predictive performance. Removing features based on their PME values should be done judiciously, ensuring that the model\u0026rsquo;s predictive capability isn\u0026rsquo;t unduly compromised. In summary, the \u0026lsquo;PME Feature Importance\u0026rsquo; chart isn\u0026rsquo;t merely a representation of feature significance but serves as a cornerstone for rigorous analytical decisions in uncertainty quantification and feature reduction. Analyzing such importance metrics within the broader context of the problem at hand ensures that models are both robust and interpretable, catering effectively to the dual objectives of predictive accuracy and analytical clarity.\nWeighted Principal Component Analysis (PCA) on Exoplanet Data Conceptual Overview: PCA is a method used to emphasize variation and capture strong patterns in a dataset. The \u0026ldquo;weighted PCA\u0026rdquo; approach fine-tunes this by considering the importance of different features, effectively giving more attention to features deemed vital.\nDetailed Breakdown: Standardization:\nBefore applying PCA, the dataset is standardized to give each feature a mean of 0 and a variance of 1. This is essential because PCA is influenced by the scale of the data. Weighted Features:\nFeatures are weighted according to their importance, as identified by the Random Forest model. Taking the square root of the weights ensures proper scaling during matrix multiplication in PCA. PCA Application:\nPCA projects the data into a new space defined by its principal components. The first two components often hold most of the dataset\u0026rsquo;s variance, making them crucial for visualization. Visualization:\nThe scatter plot visualizes the data in the space of the first two principal components. The color indicates Transit Depth (x1), shedding light on how this parameter varies across the main patterns in the data. Explained Variance:\nThis provides an understanding of how much original variance the first two components capture. A high percentage indicates that the PCA representation retains much of the data\u0026rsquo;s original structure. Significance: Data Compression:\nPCA offers a simplified yet rich representation of the data, which can be invaluable for visualization and pattern recognition. Feature Emphasis:\nUsing feature importances ensures the PCA representation highlights the most critical patterns related to influential features. Framework for Further Exploration:\nObserving patterns or groupings in the PCA plot can guide subsequent investigations, pinpointing areas of interest or potential clusters. Efficient Data Overview:\nThe visualization provides a comprehensive but digestible overview of the data, suitable for a wide range of audiences. In essence, weighted PCA melds the dimensionality reduction capabilities of PCA with the interpretative power of feature importances, offering a profound view into the dataset\u0026rsquo;s intricate structures and relationships.\nfrom sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA # The square root is used because each feature contributes to both rows and columns in the dot product calculation X_weighted = X_scaled * np.sqrt(feature_importances) # Perform PCA on the weighted data pca = PCA(n_components=2) X_pca = pca.fit_transform(X_weighted) # Plotting the first two principal components plt.figure(figsize=(10, 7)) plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', edgecolor='k', s=40) plt.colorbar().set_label('Transit Depth (x1)', rotation=270, labelpad=15) plt.xlabel('Weighted Principal Component 1') plt.ylabel('Weighted Principal Component 2') plt.title('Weighted PCA: First Two Principal Components') plt.show() # Variance explained by the first two principal components variance_explained = pca.explained_variance_ratio_ variance_explained array([0.71985328, 0.10370239]) from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Your data initialization (this part is assumed, as you haven't provided it in the original code) # X, y, feature_importances = ... # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA X_weighted = X_scaled * np.sqrt(feature_importances) # Perform PCA on the weighted data with three components pca = PCA(n_components=3) X_pca = pca.fit_transform(X_weighted) # Plotting the first three principal components fig = plt.figure(figsize=(10, 7)) ax = fig.add_subplot(111, projection='3d') scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], X_pca[:, 2], c=y, cmap='viridis', edgecolor='k', s=40) plt.colorbar(scatter, ax=ax, pad=0.2).set_label('Transit Depth (x1)', rotation=270, labelpad=15) ax.set_xlabel('Weighted Principal Component 1') ax.set_ylabel('Weighted Principal Component 2') ax.set_zlabel('Weighted Principal Component 3') plt.title('Weighted PCA: First Three Principal Components') plt.show() # Variance explained by the first three principal components variance_explained = pca.explained_variance_ratio_ variance_explained array([0.71985328, 0.10370239, 0.07160805]) # side by side from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Your data initialization (this part is assumed, as you haven't provided it in the original code) # X, y, feature_importances = ... # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA X_weighted = X_scaled * np.sqrt(feature_importances) # Create a combined figure with subplots fig, axes = plt.subplots(1, 2, figsize=(20, 7)) # Perform PCA on the weighted data with two components and plot pca2 = PCA(n_components=2) X_pca2 = pca2.fit_transform(X_weighted) scatter_2d = axes[0].scatter(X_pca2[:, 0], X_pca2[:, 1], c=y, cmap='viridis', edgecolor='k', s=40) fig.colorbar(scatter_2d, ax=axes[0], orientation='vertical').set_label('Transit Depth (x1)', rotation=270, labelpad=15) axes[0].set_xlabel('Weighted Principal Component 1') axes[0].set_ylabel('Weighted Principal Component 2') axes[0].set_title('Weighted PCA: First Two Principal Components') # Perform PCA on the weighted data with three components and plot pca3 = PCA(n_components=3) X_pca3 = pca3.fit_transform(X_weighted) ax3d = fig.add_subplot(1, 2, 2, projection='3d') scatter_3d = ax3d.scatter(X_pca3[:, 0], X_pca3[:, 1], X_pca3[:, 2], c=y, cmap='viridis', edgecolor='k', s=40) fig.colorbar(scatter_3d, ax=ax3d, pad=0.2).set_label('Transit Depth (x1)', rotation=270, labelpad=15) ax3d.set_xlabel('Weighted Principal Component 1') ax3d.set_ylabel('Weighted Principal Component 2') ax3d.set_zlabel('Weighted Principal Component 3') ax3d.set_title('Weighted PCA: First Three Principal Components') # Display the combined plot plt.tight_layout() plt.savefig('wPCA_2D_3D.png', bbox_inches='tight', dpi=300) # 'bbox_inches' ensures the entire plot is saved plt.show() import pandas as pd import seaborn as sns # Your data initialization (this part is assumed, as you haven't provided it in the original code) # df, feature_columns, transit_depth_column = ... # Reconstruct the approximate original data using the first three principal components reconstructed_data = np.dot(X_pca, pca.components_[:3, :]) + np.mean(X_scaled, axis=0) # Create a DataFrame for the reconstructed data reconstructed_df = pd.DataFrame(reconstructed_data, columns=feature_columns) # Visualize the approximate original histograms fig, axes = plt.subplots(1, len(feature_columns) + 1, figsize=(18, 4)) # Adjusted for the number of features for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df[col], bins=20, kde=True, ax=axes[i], color='orange') axes[i].set_title(f'Approx of {col}') # Add visualization for actual transit depth (since it was not part of the PCA) sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[-1], color='green') axes[-1].set_title(f'Actual {transit_depth_column}') plt.tight_layout() plt.show() fig, axes = plt.subplots(2, 8, figsize=(18, 8)) # Original Data for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[0, i]) axes[0, i].set_title(f'{col}\\nMean: {feature_mean[col]:.2f}\\nVariance: {feature_variance[col]:.2f}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[0, -1]) axes[0, -1].set_title(f'{transit_depth_column}\\nMean: {transit_depth_mean:.2f}\\nVariance: {transit_depth_variance:.2f}') # Reconstructed Data for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df[col], bins=20, kde=True, ax=axes[1, i], color='orange') axes[1, i].set_title(f'Surrogate of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[1, -1], color='green') axes[1, -1].set_title(f'Actual {transit_depth_column}') plt.tight_layout() plt.show() import pandas as pd import seaborn as sns import matplotlib.pyplot as plt from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np # Assuming data initialization and feature_importances, feature_columns, and transit_depth_column definitions exist # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA X_weighted = X_scaled * np.sqrt(feature_importances) # Initialize the figure and axes fig, axes = plt.subplots(3, len(feature_columns) + 1, figsize=(18, 12)) # Original Data histograms for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[0, i]) axes[0, i].set_title(f'Original {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[0, -1]) axes[0, -1].set_title(f'Original {transit_depth_column}') # Reconstruction using 2 PCs pca2 = PCA(n_components=2) X_pca2 = pca2.fit_transform(X_weighted) reconstructed_data_2PCs = np.dot(X_pca2, pca2.components_[:2, :]) + np.mean(X_scaled, axis=0) reconstructed_df_2PCs = pd.DataFrame(reconstructed_data_2PCs, columns=feature_columns) for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df_2PCs[col], bins=20, kde=True, ax=axes[1, i], color='orange') axes[1, i].set_title(f'2 PCs of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[1, -1], color='green') axes[1, -1].set_title(f'Original {transit_depth_column}') # Reconstruction using 3 PCs pca3 = PCA(n_components=3) X_pca3 = pca3.fit_transform(X_weighted) reconstructed_data_3PCs = np.dot(X_pca3, pca3.components_[:3, :]) + np.mean(X_scaled, axis=0) reconstructed_df_3PCs = pd.DataFrame(reconstructed_data_3PCs, columns=feature_columns) for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df_3PCs[col], bins=20, kde=True, ax=axes[2, i], color='purple') axes[2, i].set_title(f'3 PCs of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[2, -1], color='green') axes[2, -1].set_title(f'Original {transit_depth_column}') plt.tight_layout() plt.savefig('wPCA_combined_plot.png', bbox_inches='tight', dpi=500) # 'bbox_inches' ensures the entire plot is saved plt.show() Reconstruction of Exoplanet Data Using Principal Component Analysis (PCA) The code segment aims to reconstruct exoplanet data using different numbers of principal components (PCs) from PCA, offering insights into how much information retention occurs as we vary the number of PCs.\nData Standardization: The features undergo standardization, ensuring each feature has a mean of 0 and variance of 1. This normalization is crucial for PCA, as the algorithm is sensitive to varying scales across features. Weighted Features: Features are adjusted based on their significance as ascertained by a prior model, specifically the Random Forest. Weighting the features adjusts the emphasis the PCA places on each feature during the dimensionality reduction process. Data Reconstruction: After performing PCA, the algorithm seeks to transform the reduced data back to the original high-dimensional space. This \u0026ldquo;reconstructed\u0026rdquo; data is an approximation of the original but is built using fewer dimensions. Visualization of Reconstructions: Original Data Histograms:\nThe initial histograms show the distributions of the original features and the transit depth. Reconstruction Using 2 Principal Components:\nUsing only the first two PCs, the data is reconstructed and its histograms visualized. This illustrates the patterns and distributions captured when only the first two components are considered. Reconstruction Using 3 Principal Components:\nAn analogous reconstruction is done with three PCs. The addition of a third dimension might capture more nuanced variations in the data. Significance: Data Compression vs. Retention:\nThe visualizations enable us to compare the reconstructions against the original data. We discern how much information is retained and what is lost as we reduce dimensions. Guide for Dimensionality Decision:\nBy juxtaposing the original with the reconstructions, we gain insights into the optimal number of PCs to use for specific tasks, striking a balance between compression and information retention. Empirical Understanding:\nThese histograms and visual representations offer a tangible way to grasp the abstract notion of dimensionality reduction. They elucidate how PCA captures the essence of the data while diminishing dimensions. In conclusion, this analysis, coupled with the visualizations, equips us with a robust understanding of how PCA reconstructs data using varying numbers of components. It underscores the trade-offs involved and the implications of choosing specific dimensionality levels in data-driven tasks.\nimport matplotlib.pyplot as plt import matplotlib.image as mpimg import matplotlib.gridspec as gridspec # Load images img_shap = mpimg.imread('shapley.png') img_rf = mpimg.imread('random_forest_importance_plot.png') img_pme = mpimg.imread('PME.png') # Create a grid for the subplots fig_combined = plt.figure(figsize=(20, 12)) gs = gridspec.GridSpec(2, 2, width_ratios=[1, 1]) # Display SHAP plot ax0 = plt.subplot(gs[0]) ax0.imshow(img_shap) ax0.axis('off') # Display RF Importance plot ax1 = plt.subplot(gs[1]) ax1.imshow(img_rf) ax1.axis('off') # Display PME image in the middle of the 2nd row ax2 = plt.subplot(gs[2:4]) # This makes the PME plot span both columns on the second row ax2.imshow(img_pme) ax2.axis('off') plt.tight_layout() plt.savefig('sensitivity_combined_plot.png', bbox_inches='tight', dpi=300) # 'bbox_inches' ensures the entire plot is saved plt.show() This code snippet consolidates and displays three distinct plotsâ€”SHAP values, Random Forest Feature Importance, and PME Feature Importanceâ€”into a single visualization. The images are loaded and arranged in a 2x2 grid, with the SHAP and Random Forest plots on the top row, and the PME plot spanning both columns on the bottom row. After layout adjustments, the combined visualization is saved as a high-resolution PNG image titled \u0026lsquo;sensitivity_combined_plot.png\u0026rsquo; and then displayed.\nReference Changeat, Q., \u0026amp; Yip, K. H. (2023). ESA-Ariel Data Challenge NeurIPS 2022: Introduction to exo-atmospheric studies and presentation of the Atmospheric Big Challenge (ABC) Database. arXiv preprint arXiv:2206.14633.\nHerin, M., Il Idrissi, M., Chabridon, V., \u0026amp; Iooss, B. (2022). Proportional marginal effects for global sensitivity analysis. arXiv preprint arXiv:2210.13065.\n","date":1696636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696636800,"objectID":"1b509f3f313764a09d3e53fcef6e0fa9","permalink":"/2023/10/07/exoplanet-modeling/","publishdate":"2023-10-07T00:00:00Z","relpermalink":"/2023/10/07/exoplanet-modeling/","section":"post","summary":"The figure below showcases a spectrum integral to exoplanet detection, charting the transit depth against the wavelength in microns. Every observation point in the spectrum carries an inherent uncertainty, denoted by the vertical error bars.","tags":[],"title":"Exoplanet modeling","type":"post"},{"authors":["Deepak Bastola"],"categories":["machine learning","data science","prediction"],"content":"Informer The Informer model variant is designed for multivariate prediction. Let\u0026rsquo;s consider \u0026lsquo;Open\u0026rsquo;, \u0026lsquo;High\u0026rsquo;, \u0026lsquo;Low\u0026rsquo;, and \u0026lsquo;Close\u0026rsquo; prices for simplicity. The provided code is designed to fetch and preprocess historical stock prices for Apple Inc. for the purpose of multivariate time series forecasting using an LSTM model. Initially, the code downloads Apple\u0026rsquo;s stock data, specifically capturing four significant features: Open, High, Low, and Close prices. To make the data suitable for deep learning models, it is normalized to fit within a range of 0 to 1. The sequential data is then transformed into a format suitable for supervised learning, where the data from the past look_back days is used to predict the next day\u0026rsquo;s features. Finally, the data is partitioned into training (67%) and test sets, ensuring separate datasets for model training and evaluation.\n!pip install yfinance import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.preprocessing import MinMaxScaler from sklearn.metrics import mean_squared_error import tensorflow as tf import yfinance as yf # Download historical data as dataframe data = yf.download(\u0026quot;AAPL\u0026quot;, start=\u0026quot;2018-01-01\u0026quot;, end=\u0026quot;2023-09-01\u0026quot;) # Using multiple columns for multivariate prediction df = data[[\u0026quot;Open\u0026quot;, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;, \u0026quot;Close\u0026quot;]] # Normalize the data scaler = MinMaxScaler(feature_range=(0, 1)) df_scaled = scaler.fit_transform(df) # Prepare data for LSTM look_back = 10 # Number of previous time steps to use as input variables n_features = df.shape[1] # number of features # Convert to supervised learning problem X, y = [], [] for i in range(len(df_scaled) - look_back): X.append(df_scaled[i:i+look_back, :]) y.append(df_scaled[i + look_back, :]) X, y = np.array(X), np.array(y) # Reshape input to be [samples, time steps, features] X = np.reshape(X, (X.shape[0], X.shape[1], n_features)) # Train-test split train_size = int(len(X) * 0.67) test_size = len(X) - train_size X_train, X_test = X[0:train_size], X[train_size:] y_train, y_test = y[0:train_size], y[train_size:] print(X_train.shape, y_train.shape, X_test.shape, y_test.shape) ProbSparse Self-Attention: Self-attention involves computing a weighted sum of all values in the sequence, based on the dot product between the query and key. In ProbSparse, we don\u0026rsquo;t compute this for all query-key pairs, but rather select dominant ones, thus making the computation more efficient. The given code defines a custom Keras layer, ProbSparseSelfAttention, which implements the multi-head self-attention mechanism, a critical component of Transformer models. This layer initializes three dense networks for the Query, Key, and Value matrices, and splits the input data into multiple heads to enable parallel processing. During the forward pass (call method), the Query, Key, and Value matrices are calculated, scaled, and then used to compute attention scores. These scores indicate the importance of each element in the sequence when predicting another element. The output is a weighted sum of the input values, which is then passed through another dense layer to produce the final result.\nclass ProbSparseSelfAttention(tf.keras.layers.Layer): def __init__(self, d_model, num_heads, **kwargs): super(ProbSparseSelfAttention, self).__init__(**kwargs) self.num_heads = num_heads self.d_model = d_model # Assert that d_model is divisible by num_heads assert self.d_model % self.num_heads == 0, f\u0026quot;d_model ({d_model}) must be divisible by num_heads ({num_heads})\u0026quot; self.depth = d_model // self.num_heads # Defining the dense layers for Query, Key and Value self.wq = tf.keras.layers.Dense(d_model) self.wk = tf.keras.layers.Dense(d_model) self.wv = tf.keras.layers.Dense(d_model) self.dense = tf.keras.layers.Dense(d_model) def split_heads(self, x, batch_size): x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth)) return tf.transpose(x, perm=[0, 2, 1, 3]) def call(self, v, k, q): batch_size = tf.shape(q)[0] q = self.wq(q) k = self.wk(k) v = self.wv(v) q = self.split_heads(q, batch_size) k = self.split_heads(k, batch_size) v = self.split_heads(v, batch_size) # Fixing matrix multiplication matmul_qk = tf.matmul(q, k, transpose_b=True) d_k = tf.cast(self.depth, tf.float32) scaled_attention_logits = matmul_qk / tf.math.sqrt(d_k) attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1) output = tf.matmul(attention_weights, v) output = tf.transpose(output, perm=[0, 2, 1, 3]) concat_attention = tf.reshape(output, (batch_size, -1, self.d_model)) return self.dense(concat_attention) Informer Encoder: The InformerEncoder is a custom Keras layer designed to process sequential data using a combination of attention and convolutional mechanisms. Within the encoder, the input data undergoes multi-head self-attention, utilizing the ProbSparseSelfAttention mechanism, to capture relationships in the data regardless of their distance. Post attention, the data is transformed and normalized, then further processed using two 1D convolutional layers, emphasizing local features in the data. After another normalization step, the processed data is pooled to a lower dimensionality, ensuring the model captures global context, and then passed through a dense layer to produce the final output.\nclass InformerEncoder(tf.keras.layers.Layer): def __init__(self, d_model, num_heads, conv_filters, **kwargs): super(InformerEncoder, self).__init__(**kwargs) self.d_model = d_model self.num_heads = num_heads # Assert that d_model is divisible by num_heads assert self.d_model % self.num_heads == 0, f\u0026quot;d_model ({d_model}) must be divisible by num_heads ({num_heads})\u0026quot; self.self_attention = ProbSparseSelfAttention(d_model=d_model, num_heads=num_heads) self.norm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6) # This dense layer will transform the input 'x' to have the dimensionality 'd_model' self.dense_transform = tf.keras.layers.Dense(d_model) self.conv1 = tf.keras.layers.Conv1D(conv_filters, 3, padding='same') self.conv2 = tf.keras.layers.Conv1D(d_model, 3, padding='same') self.norm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6) self.global_avg_pooling = tf.keras.layers.GlobalAveragePooling1D() self.dense = tf.keras.layers.Dense(d_model) def call(self, x): attn_output = self.self_attention(x, x, x) # Transform 'x' to have the desired dimensionality x_transformed = self.dense_transform(x) attn_output = self.norm1(attn_output + x_transformed) conv_output = self.conv1(attn_output) conv_output = tf.nn.relu(conv_output) conv_output = self.conv2(conv_output) encoded_output = self.norm2(conv_output + attn_output) pooled_output = self.global_avg_pooling(encoded_output) return self.dense(pooled_output)[:, -4:] input_layer = tf.keras.layers.Input(shape=(look_back, n_features)) # Encoder encoder_output = InformerEncoder(d_model=360, num_heads=8, conv_filters=64)(input_layer) # Decoder (with attention) decoder_lstm = tf.keras.layers The InformerModel function is designed to create a deep learning architecture tailored for sequential data prediction. It takes an input sequence and processes it using the InformerEncoder, a custom encoder layer, which captures both local and global patterns in the data. Following the encoding step, a decoder structure unravels the encoded data by first repeating the encoder\u0026rsquo;s output, then passing it through an LSTM layer to retain sequential dependencies, and finally making predictions using a dense layer. The resulting architecture is then compiled with the Adam optimizer and Mean Squared Error loss, ready for training on time series data.\nfrom tensorflow.keras.layers import RepeatVector from tensorflow.keras.layers import Input from tensorflow.keras.layers import LSTM from tensorflow.keras.layers import Dense from tensorflow.keras.models import Model from tensorflow.keras.optimizers import Adam def InformerModel(input_shape, d_model=64, num_heads=2, conv_filters=256, learning_rate= 1e-3): # Input input_layer = Input(shape=input_shape) # Encoder encoder_output = InformerEncoder(d_model=d_model, num_heads=num_heads, conv_filters=conv_filters)(input_layer) # Decoder repeated_output = RepeatVector(4)(encoder_output) # Repeating encoder's output decoder_lstm = LSTM(312, return_sequences=True)(repeated_output) decoder_output = Dense(4)(decoder_lstm[:, -1, :]) # Use the last sequence output to predict the next value # Model model = Model(inputs=input_layer, outputs=decoder_output) # Compile the model with the specified learning rate optimizer = Adam(learning_rate=learning_rate) model.compile(optimizer=optimizer, loss='mean_squared_error') return model model = InformerModel(input_shape=(look_back, n_features)) model.compile(optimizer='adam', loss='mean_squared_error') model.summary() Model: \u0026quot;model_10\u0026quot; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_12 (InputLayer) [(None, 10, 4)] 0 informer_encoder_11 (Infor (None, 4) 108480 merEncoder) repeat_vector_10 (RepeatVe (None, 4, 4) 0 ctor) lstm_10 (LSTM) (None, 4, 312) 395616 tf.__operators__.getitem_1 (None, 312) 0 0 (SlicingOpLambda) dense_82 (Dense) (None, 4) 1252 ================================================================= Total params: 505348 (1.93 MB) Trainable params: 505348 (1.93 MB) Non-trainable params: 0 (0.00 Byte) _________________________________________________________________ The model.fit method trains the neural network using the provided training data (X_train and y_train) for a total of 50 epochs with mini-batches of 32 samples. During training, 20% of the training data is set aside for validation to monitor and prevent overfitting.\nhistory = model.fit( X_train, y_train, epochs=50, batch_size=64, validation_split=0.3, shuffle=True ) The code displays a visual representation of the model\u0026rsquo;s training and validation loss over the epochs using a line chart. The x-axis represents the number of epochs, while the y-axis indicates the mean squared error, allowing users to observe how the model\u0026rsquo;s performance evolves over time.\nplt.figure(figsize=(12, 6)) plt.plot(history.history['loss'], label='Training Loss') plt.plot(history.history['val_loss'], label='Validation Loss') plt.title('Training and Validation Loss') plt.xlabel('Epoch') plt.ylabel('Mean Squared Error') plt.legend() plt.show() test_predictions = model.predict(X_test) test_predictions = scaler.inverse_transform(test_predictions) true_values = scaler.inverse_transform(y_test) mse = mean_squared_error(true_values, test_predictions) print(f\u0026quot;Test MSE: {mse}\u0026quot;) 15/15 [==============================] - 1s 3ms/step Test MSE: 462.6375895467179 plt.figure(figsize=(12, 6)) plt.plot(true_values, label='True Values') plt.plot(test_predictions, label='Predictions', alpha=0.6) plt.title('Test Set Predictions vs. True Values') plt.legend() plt.show() !pip install keras-tuner The code defines a function to construct a neural network model using varying hyperparameters, aiming to optimize its architecture. Subsequently, the RandomSearch method from Keras Tuner is employed to explore 200 different model configurations, assessing their performance to determine the best hyperparameters that minimize the validation loss.\nfrom tensorflow.keras.layers import Input, RepeatVector, LSTM, Dense from tensorflow.keras.models import Model from tensorflow.keras.optimizers import Adam import tensorflow as tf import kerastuner as kt def build_model(hp): # Input input_layer = Input(shape=(look_back, n_features)) # Encoder encoder_output = InformerEncoder(d_model=hp.Int('d_model', min_value=32, max_value=512, step=16), num_heads=hp.Int('num_heads', 2, 8, step=2), conv_filters=hp.Int('conv_filters', min_value=16, max_value=256, step=16))(input_layer) # Decoder repeated_output = RepeatVector(4)(encoder_output) # Repeating encoder's output decoder_lstm = LSTM(312, return_sequences=True)(repeated_output) decoder_output = Dense(4)(decoder_lstm[:, -1, :]) # Use the last sequence output to predict the next value # Model model = Model(inputs=input_layer, outputs=decoder_output) # Compile the model with the specified learning rate optimizer = Adam(learning_rate=hp.Choice('learning_rate', [1e-3, 1e-2, 1e-1])) model.compile(optimizer=optimizer, loss='mean_squared_error') return model # Define the tuner tuner = kt.RandomSearch( build_model, objective='val_loss', max_trials=30, executions_per_trial=5, directory='hyperparam_search', project_name='informer_model' ) The code sets up two training callbacks: one for early stopping if validation loss doesn\u0026rsquo;t improve after 10 epochs, and another to save the model weights at their best performance. With these callbacks, the tuner conducts a search over the hyperparameter space using the training data, and evaluates model configurations over 100 epochs, saving the most optimal weights and potentially halting early if improvements stagnate.\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint early_stopping = EarlyStopping(monitor='val_loss', patience=10, verbose=1, restore_best_weights=True) model_checkpoint = ModelCheckpoint(filepath='trial_best.h5', monitor='val_loss', verbose=1, save_best_only=True) tuner.search(X_train, y_train, epochs=100, validation_split=0.2, callbacks=[early_stopping, model_checkpoint]) Trial 30 Complete [00h 00m 01s] Best val_loss So Far: 0.0009468139498494566 Total elapsed time: 00h 30m 43s # Get the best hyperparameters best_hp = tuner.get_best_hyperparameters()[0] # Retrieve the best model best_model = tuner.get_best_models()[0] best_model.summary() Model: \u0026quot;model\u0026quot; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_1 (InputLayer) [(None, 10, 4)] 0 informer_encoder (Informer (None, 4) 108480 Encoder) repeat_vector (RepeatVecto (None, 4, 4) 0 r) lstm (LSTM) (None, 4, 312) 395616 tf.__operators__.getitem ( (None, 312) 0 SlicingOpLambda) dense_6 (Dense) (None, 4) 1252 ================================================================= Total params: 505348 (1.93 MB) Trainable params: 505348 (1.93 MB) Non-trainable params: 0 (0.00 Byte) _________________________________________________________________ test_loss = best_model.evaluate(X_test, y_test) print(f\u0026quot;Test MSE: {test_loss}\u0026quot;) 15/15 [==============================] - 0s 3ms/step - loss: 0.0086 Test MSE: 0.008609036915004253 plt.figure(figsize=(20, 12)) for i in range(true_values.shape[1]): plt.subplot(2, 2, i+1) plt.plot(true_values[:, i], label='True Values', color='blue') plt.plot(test_predictions[:, i], label='Predictions', color='red', linestyle='--') plt.title(f\u0026quot;Feature {i+1}\u0026quot;) plt.legend() plt.tight_layout() plt.show() from sklearn.metrics import mean_absolute_error mae = mean_absolute_error(true_values, test_predictions) rmse = np.sqrt(test_loss) # since loss is MSE print(f\u0026quot;MAE: {mae}, RMSE: {rmse}\u0026quot;) MAE: 19.377517553476185, RMSE: 0.09278489594219662 print(f\u0026quot;Best d_model: {best_hp.get('d_model')}\u0026quot;) print(f\u0026quot;Best num_heads: {best_hp.get('num_heads')}\u0026quot;) print(f\u0026quot;Best conv_filters: {best_hp.get('conv_filters')}\u0026quot;) print(f\u0026quot;Best learning_rate: {best_hp.get('learning_rate')}\u0026quot;) Best d_model: 64 Best num_heads: 2 Best conv_filters: 256 Best learning_rate: 0.001 !pip install shap import shap # The reference can be a dataset or just random data background = X_train[np.random.choice(X_train.shape[0], 300, replace=False)] # Taking a random sample of the training data as background explainer = shap.GradientExplainer(best_model, background) shap_values = explainer.shap_values(X_test[:300]) # Computing for a subset for performance reasons for timestep in range(10): print(f\u0026quot;Summary plot for timestep {timestep + 1}\u0026quot;) shap.summary_plot(shap_values[0][:, timestep, :], X_test[:300, timestep, :]) Summary plot for timestep 1 Summary plot for timestep 2 Summary plot for timestep 3 Summary plot for timestep 4 Summary plot for timestep 5 Summary plot for timestep 6 Summary plot for timestep 7 Summary plot for timestep 8 Summary plot for timestep 9 Summary plot for timestep 10 Shapley values SHAP values are indicating by how much the presence of a particular feature influenced the model\u0026rsquo;s prediction, compared to if that feature was absent. The color represents the actual value of the feature itself. In the context of the present work, Shapley values are employed as a method to enhance the interpretability of the model. Shapley values provide insights into the contribution of each feature to the model\u0026rsquo;s predictions. Specifically, they quantify how each feature influences the prediction by evaluating its impact when combined with all other features. By calculating Shapley values, we gain a clear understanding of the relative importance of each feature in multivariate time series prediction.\nOverall, Shapley values enhance model interpretability by offering a systematic and quantitative way to dissect complex models and understand their decision-making processes. They enable us to identify which features are the key drivers of predictions, helping us make more informed decisions and potentially improving model performance. This interpretability is crucial in various applications, from finance to healthcare, where understanding the factors influencing predictions is paramount for trust and decision-making.\n","date":1696636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696636800,"objectID":"d733a02de2ce4296ecca743eab9c5ff1","permalink":"/2023/10/07/how-to-predict-aapl-stick-price-using-an-informer-model-to-capture-long-term-dependencies/","publishdate":"2023-10-07T00:00:00Z","relpermalink":"/2023/10/07/how-to-predict-aapl-stick-price-using-an-informer-model-to-capture-long-term-dependencies/","section":"post","summary":"Informer The Informer model variant is designed for multivariate prediction. Let\u0026rsquo;s consider \u0026lsquo;Open\u0026rsquo;, \u0026lsquo;High\u0026rsquo;, \u0026lsquo;Low\u0026rsquo;, and \u0026lsquo;Close\u0026rsquo; prices for simplicity. The provided code is designed to fetch and preprocess historical stock prices for Apple Inc.","tags":[],"title":"How to predict AAPL Stick price using an Informer model to capture long term dependencies?","type":"post"},{"authors":["Deepak Bastola"],"categories":["Machine Learning","Prediction"],"content":"Informer We aim to predict stock prices for Apple Inc. using multivariate time series data, focusing on \u0026lsquo;Open\u0026rsquo;, \u0026lsquo;High\u0026rsquo;, \u0026lsquo;Low\u0026rsquo;, and \u0026lsquo;Close\u0026rsquo; prices. The process begins by acquiring historical stock data from Yahoo Finance. Once acquired, we extract the four essential columns for prediction. To ensure optimal LSTM model performance, the data is normalized to fit between 0 and 1. We then transform this sequential data into a format suitable for supervised learning, where a sequence of 10 days\u0026rsquo; data predicts the following day\u0026rsquo;s features. This structured data is divided into training and test sets, with 67% dedicated to training and the remaining 33% for testing. This pre-processed dataset is now primed for feeding into an LSTM model for forecasting.\n!pip install yfinance import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.preprocessing import MinMaxScaler from sklearn.metrics import mean_squared_error import tensorflow as tf import yfinance as yf # Download historical data as dataframe data = yf.download(\u0026quot;AAPL\u0026quot;, start=\u0026quot;2018-01-01\u0026quot;, end=\u0026quot;2023-09-01\u0026quot;) # Using multiple columns for multivariate prediction df = data[[\u0026quot;Open\u0026quot;, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;, \u0026quot;Close\u0026quot;]] # Normalize the data scaler = MinMaxScaler(feature_range=(0, 1)) df_scaled = scaler.fit_transform(df) # Prepare data for LSTM look_back = 10 # Number of previous time steps to use as input variables n_features = df.shape[1] # number of features # Convert to supervised learning problem X, y = [], [] for i in range(len(df_scaled) - look_back): X.append(df_scaled[i:i+look_back, :]) y.append(df_scaled[i + look_back, :]) X, y = np.array(X), np.array(y) # Reshape input to be [samples, time steps, features] X = np.reshape(X, (X.shape[0], X.shape[1], n_features)) # Train-test split train_size = int(len(X) * 0.67) test_size = len(X) - train_size X_train, X_test = X[0:train_size], X[train_size:] y_train, y_test = y[0:train_size], y[train_size:] print(X_train.shape, y_train.shape, X_test.shape, y_test.shape) ProbSparse Self-Attention: Self-attention involves computing a weighted sum of all values in the sequence, based on the dot product between the query and key. In ProbSparse, we don\u0026rsquo;t compute this for all query-key pairs, but rather select dominant ones, thus making the computation more efficient. The given code defines a custom Keras layer, ProbSparseSelfAttention, which implements the multi-head self-attention mechanism, a critical component of Transformer models. This layer initializes three dense networks for the Query, Key, and Value matrices, and splits the input data into multiple heads to enable parallel processing. During the forward pass (call method), the Query, Key, and Value matrices are calculated, scaled, and then used to compute attention scores. These scores indicate the importance of each element in the sequence when predicting another element. The output is a weighted sum of the input values, which is then passed through another dense layer to produce the final result.\nclass ProbSparseSelfAttention(tf.keras.layers.Layer): def __init__(self, d_model, num_heads, **kwargs): super(ProbSparseSelfAttention, self).__init__(**kwargs) self.num_heads = num_heads self.d_model = d_model # Assert that d_model is divisible by num_heads assert self.d_model % self.num_heads == 0, f\u0026quot;d_model ({d_model}) must be divisible by num_heads ({num_heads})\u0026quot; self.depth = d_model // self.num_heads # Defining the dense layers for Query, Key and Value self.wq = tf.keras.layers.Dense(d_model) self.wk = tf.keras.layers.Dense(d_model) self.wv = tf.keras.layers.Dense(d_model) self.dense = tf.keras.layers.Dense(d_model) def split_heads(self, x, batch_size): x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth)) return tf.transpose(x, perm=[0, 2, 1, 3]) def call(self, v, k, q): batch_size = tf.shape(q)[0] q = self.wq(q) k = self.wk(k) v = self.wv(v) q = self.split_heads(q, batch_size) k = self.split_heads(k, batch_size) v = self.split_heads(v, batch_size) # Fixing matrix multiplication matmul_qk = tf.matmul(q, k, transpose_b=True) d_k = tf.cast(self.depth, tf.float32) scaled_attention_logits = matmul_qk / tf.math.sqrt(d_k) attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1) output = tf.matmul(attention_weights, v) output = tf.transpose(output, perm=[0, 2, 1, 3]) concat_attention = tf.reshape(output, (batch_size, -1, self.d_model)) return self.dense(concat_attention) Informer Encoder: The InformerEncoder is a custom Keras layer designed to process sequential data using a combination of attention and convolutional mechanisms. Within the encoder, the input data undergoes multi-head self-attention, utilizing the ProbSparseSelfAttention mechanism, to capture relationships in the data regardless of their distance. Post attention, the data is transformed and normalized, then further processed using two 1D convolutional layers, emphasizing local features in the data. After another normalization step, the processed data is pooled to a lower dimensionality, ensuring the model captures global context, and then passed through a dense layer to produce the final output.\nclass InformerEncoder(tf.keras.layers.Layer): def __init__(self, d_model, num_heads, conv_filters, **kwargs): super(InformerEncoder, self).__init__(**kwargs) self.d_model = d_model self.num_heads = num_heads # Assert that d_model is divisible by num_heads assert self.d_model % self.num_heads == 0, f\u0026quot;d_model ({d_model}) must be divisible by num_heads ({num_heads})\u0026quot; self.self_attention = ProbSparseSelfAttention(d_model=d_model, num_heads=num_heads) self.norm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6) # This dense layer will transform the input 'x' to have the dimensionality 'd_model' self.dense_transform = tf.keras.layers.Dense(d_model) self.conv1 = tf.keras.layers.Conv1D(conv_filters, 3, padding='same') self.conv2 = tf.keras.layers.Conv1D(d_model, 3, padding='same') self.norm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6) self.global_avg_pooling = tf.keras.layers.GlobalAveragePooling1D() self.dense = tf.keras.layers.Dense(d_model) def call(self, x): attn_output = self.self_attention(x, x, x) # Transform 'x' to have the desired dimensionality x_transformed = self.dense_transform(x) attn_output = self.norm1(attn_output + x_transformed) conv_output = self.conv1(attn_output) conv_output = tf.nn.relu(conv_output) conv_output = self.conv2(conv_output) encoded_output = self.norm2(conv_output + attn_output) pooled_output = self.global_avg_pooling(encoded_output) return self.dense(pooled_output)[:, -4:] input_layer = tf.keras.layers.Input(shape=(look_back, n_features)) # Encoder encoder_output = InformerEncoder(d_model=360, num_heads=8, conv_filters=64)(input_layer) # Decoder (with attention) decoder_lstm = tf.keras.layers The InformerModel function is designed to create a deep learning architecture tailored for sequential data prediction. It takes an input sequence and processes it using the InformerEncoder, a custom encoder layer, which captures both local and global patterns in the data. Following the encoding step, a decoder structure unravels the encoded data by first repeating the encoder\u0026rsquo;s output, then passing it through an LSTM layer to retain sequential dependencies, and finally making predictions using a dense layer. The resulting architecture is then compiled with the Adam optimizer and Mean Squared Error loss, ready for training on time series data.\nfrom tensorflow.keras.layers import RepeatVector from tensorflow.keras.layers import Input from tensorflow.keras.layers import LSTM from tensorflow.keras.layers import Dense from tensorflow.keras.models import Model from tensorflow.keras.optimizers import Adam def InformerModel(input_shape, d_model=64, num_heads=2, conv_filters=256, learning_rate= 1e-3): # Input input_layer = Input(shape=input_shape) # Encoder encoder_output = InformerEncoder(d_model=d_model, num_heads=num_heads, conv_filters=conv_filters)(input_layer) # Decoder repeated_output = RepeatVector(4)(encoder_output) # Repeating encoder's output decoder_lstm = LSTM(312, return_sequences=True)(repeated_output) decoder_output = Dense(4)(decoder_lstm[:, -1, :]) # Use the last sequence output to predict the next value # Model model = Model(inputs=input_layer, outputs=decoder_output) # Compile the model with the specified learning rate optimizer = Adam(learning_rate=learning_rate) model.compile(optimizer=optimizer, loss='mean_squared_error') return model model = InformerModel(input_shape=(look_back, n_features)) model.compile(optimizer='adam', loss='mean_squared_error') model.summary() Model: \u0026quot;model_10\u0026quot; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_12 (InputLayer) [(None, 10, 4)] 0 informer_encoder_11 (Infor (None, 4) 108480 merEncoder) repeat_vector_10 (RepeatVe (None, 4, 4) 0 ctor) lstm_10 (LSTM) (None, 4, 312) 395616 tf.__operators__.getitem_1 (None, 312) 0 0 (SlicingOpLambda) dense_82 (Dense) (None, 4) 1252 ================================================================= Total params: 505348 (1.93 MB) Trainable params: 505348 (1.93 MB) Non-trainable params: 0 (0.00 Byte) _________________________________________________________________ The model.fit method trains the neural network using the provided training data (X_train and y_train) for a total of 50 epochs with mini-batches of 32 samples. During training, 20% of the training data is set aside for validation to monitor and prevent overfitting.\nhistory = model.fit( X_train, y_train, epochs=50, batch_size=64, validation_split=0.3, shuffle=True ) The code displays a visual representation of the model\u0026rsquo;s training and validation loss over the epochs using a line chart. The x-axis represents the number of epochs, while the y-axis indicates the mean squared error, allowing users to observe how the model\u0026rsquo;s performance evolves over time.\nplt.figure(figsize=(12, 6)) plt.plot(history.history['loss'], label='Training Loss') plt.plot(history.history['val_loss'], label='Validation Loss') plt.title('Training and Validation Loss') plt.xlabel('Epoch') plt.ylabel('Mean Squared Error') plt.legend() plt.show() test_predictions = model.predict(X_test) test_predictions = scaler.inverse_transform(test_predictions) true_values = scaler.inverse_transform(y_test) mse = mean_squared_error(true_values, test_predictions) print(f\u0026quot;Test MSE: {mse}\u0026quot;) 15/15 [==============================] - 1s 3ms/step Test MSE: 462.6375895467179 plt.figure(figsize=(12, 6)) plt.plot(true_values, label='True Values') plt.plot(test_predictions, label='Predictions', alpha=0.6) plt.title('Test Set Predictions vs. True Values') plt.legend() plt.show() !pip install keras-tuner The code defines a function to construct a neural network model using varying hyperparameters, aiming to optimize its architecture. Subsequently, the RandomSearch method from Keras Tuner is employed to explore 200 different model configurations, assessing their performance to determine the best hyperparameters that minimize the validation loss.\nfrom tensorflow.keras.layers import Input, RepeatVector, LSTM, Dense from tensorflow.keras.models import Model from tensorflow.keras.optimizers import Adam import tensorflow as tf import kerastuner as kt def build_model(hp): # Input input_layer = Input(shape=(look_back, n_features)) # Encoder encoder_output = InformerEncoder(d_model=hp.Int('d_model', min_value=32, max_value=512, step=16), num_heads=hp.Int('num_heads', 2, 8, step=2), conv_filters=hp.Int('conv_filters', min_value=16, max_value=256, step=16))(input_layer) # Decoder repeated_output = RepeatVector(4)(encoder_output) # Repeating encoder's output decoder_lstm = LSTM(312, return_sequences=True)(repeated_output) decoder_output = Dense(4)(decoder_lstm[:, -1, :]) # Use the last sequence output to predict the next value # Model model = Model(inputs=input_layer, outputs=decoder_output) # Compile the model with the specified learning rate optimizer = Adam(learning_rate=hp.Choice('learning_rate', [1e-3, 1e-2, 1e-1])) model.compile(optimizer=optimizer, loss='mean_squared_error') return model # Define the tuner tuner = kt.RandomSearch( build_model, objective='val_loss', max_trials=30, executions_per_trial=5, directory='hyperparam_search', project_name='informer_model' ) The code sets up two training callbacks: one for early stopping if validation loss doesn\u0026rsquo;t improve after 10 epochs, and another to save the model weights at their best performance. With these callbacks, the tuner conducts a search over the hyperparameter space using the training data, and evaluates model configurations over 100 epochs, saving the most optimal weights and potentially halting early if improvements stagnate.\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint early_stopping = EarlyStopping(monitor='val_loss', patience=10, verbose=1, restore_best_weights=True) model_checkpoint = ModelCheckpoint(filepath='trial_best.h5', monitor='val_loss', verbose=1, save_best_only=True) tuner.search(X_train, y_train, epochs=100, validation_split=0.2, callbacks=[early_stopping, model_checkpoint]) Trial 30 Complete [00h 00m 01s] Best val_loss So Far: 0.0009468139498494566 Total elapsed time: 00h 30m 43s # Get the best hyperparameters best_hp = tuner.get_best_hyperparameters()[0] # Retrieve the best model best_model = tuner.get_best_models()[0] best_model.summary() Model: \u0026quot;model\u0026quot; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_1 (InputLayer) [(None, 10, 4)] 0 informer_encoder (Informer (None, 4) 108480 Encoder) repeat_vector (RepeatVecto (None, 4, 4) 0 r) lstm (LSTM) (None, 4, 312) 395616 tf.__operators__.getitem ( (None, 312) 0 SlicingOpLambda) dense_6 (Dense) (None, 4) 1252 ================================================================= Total params: 505348 (1.93 MB) Trainable params: 505348 (1.93 MB) Non-trainable params: 0 (0.00 Byte) _________________________________________________________________ test_loss = best_model.evaluate(X_test, y_test) print(f\u0026quot;Test MSE: {test_loss}\u0026quot;) 15/15 [==============================] - 0s 3ms/step - loss: 0.0086 Test MSE: 0.008609036915004253 plt.figure(figsize=(20, 12)) for i in range(true_values.shape[1]): plt.subplot(2, 2, i+1) plt.plot(true_values[:, i], label='True Values', color='blue') plt.plot(test_predictions[:, i], label='Predictions', color='red', linestyle='--') plt.title(f\u0026quot;Feature {i+1}\u0026quot;) plt.legend() plt.tight_layout() plt.show() from sklearn.metrics import mean_absolute_error mae = mean_absolute_error(true_values, test_predictions) rmse = np.sqrt(test_loss) # since loss is MSE print(f\u0026quot;MAE: {mae}, RMSE: {rmse}\u0026quot;) MAE: 19.377517553476185, RMSE: 0.09278489594219662 print(f\u0026quot;Best d_model: {best_hp.get('d_model')}\u0026quot;) print(f\u0026quot;Best num_heads: {best_hp.get('num_heads')}\u0026quot;) print(f\u0026quot;Best conv_filters: {best_hp.get('conv_filters')}\u0026quot;) print(f\u0026quot;Best learning_rate: {best_hp.get('learning_rate')}\u0026quot;) Best d_model: 64 Best num_heads: 2 Best conv_filters: 256 Best learning_rate: 0.001 !pip install shap import shap # The reference can be a dataset or just random data background = X_train[np.random.choice(X_train.shape[0], 300, replace=False)] # Taking a random sample of the training data as background explainer = shap.GradientExplainer(best_model, background) shap_values = explainer.shap_values(X_test[:300]) # Computing for a subset for performance reasons for timestep in range(10): print(f\u0026quot;Summary plot for timestep {timestep + 1}\u0026quot;) shap.summary_plot(shap_values[0][:, timestep, :], X_test[:300, timestep, :]) Summary plot for timestep 1 Summary plot for timestep 2 Summary plot for timestep 3 Summary plot for timestep 4 Summary plot for timestep 5 Summary plot for timestep 6 Summary plot for timestep 7 Summary plot for timestep 8 Summary plot for timestep 9 Summary plot for timestep 10 Shapley values SHAP values are indicating by how much the presence of a particular feature influenced the model\u0026rsquo;s prediction, compared to if that feature was absent. The color represents the actual value of the feature itself. In the context of the present work, Shapley values are employed as a method to enhance the interpretability of the model. Shapley values provide insights into the contribution of each feature to the model\u0026rsquo;s predictions. Specifically, they quantify how each feature influences the prediction by evaluating its impact when combined with all other features. By calculating Shapley values, we gain a clear understanding of the relative importance of each feature in multivariate time series prediction.\nOverall, Shapley values enhance model interpretability by offering a systematic and quantitative way to dissect complex models and understand their decision-making processes. They enable us to identify which features are the key drivers of predictions, helping us make more informed decisions and potentially improving model performance. This interpretability is crucial in various applications, from finance to healthcare, where understanding the factors influencing predictions is paramount for trust and decision-making.\n","date":1696636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696636800,"objectID":"1e27f5bb2c06c362019fcc07b686be50","permalink":"/project/internal-project/informer-timeseries/","publishdate":"2023-10-07T00:00:00Z","relpermalink":"/project/internal-project/informer-timeseries/","section":"project","summary":"Informer We aim to predict stock prices for Apple Inc. using multivariate time series data, focusing on \u0026lsquo;Open\u0026rsquo;, \u0026lsquo;High\u0026rsquo;, \u0026lsquo;Low\u0026rsquo;, and \u0026lsquo;Close\u0026rsquo; prices. The process begins by acquiring historical stock data from Yahoo Finance.","tags":null,"title":"Predicting AAPL Stock Price with Informer Model","type":"project"},{"authors":["Deepak Bastola"],"categories":null,"content":"# Import required libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns The figure below showcases a spectrum integral to exoplanet detection, charting the transit depth against the wavelength in microns. Every observation point in the spectrum carries an inherent uncertainty, denoted by the vertical error bars. To decode and potentially minimize this uncertainty, it\u0026rsquo;s pivotal to fathom how features like planet radius, planet temperature, and the logarithmic concentrations of Hâ‚‚O, COâ‚‚, CO, CHâ‚„, and NHâ‚ƒ influence the transit depth. Leveraging interpretative tools like SHAP can provide insights into how these exoplanetary features impact the observed transit depth, refining our understanding and accuracy in exoplanet spectral analysis.\nfrom IPython.display import Image Image(filename='my_spectrum.png') # Load the CSV file into a Pandas DataFrame df = pd.read_csv(\u0026quot;small_astro.csv\u0026quot;) df_backup = df.copy() df_backup.head(10) Unnamed: 0 planet_radius planet_temp log_h2o log_co2 log_co log_ch4 log_nh3 x1 x2 ... x43 x44 x45 x46 x47 x48 x49 x50 x51 x52 0 1 0.559620 863.394770 -8.865868 -6.700707 -5.557561 -8.957615 -3.097540 0.003836 0.003834 ... 0.003938 0.003941 0.003903 0.003931 0.003983 0.004019 0.004046 0.004072 0.004054 0.004056 1 2 1.118308 1201.700465 -4.510258 -8.228966 -3.565427 -7.807424 -3.633658 0.015389 0.015148 ... 0.015450 0.015447 0.015461 0.015765 0.016099 0.016376 0.016549 0.016838 0.016781 0.016894 2 3 0.400881 1556.096477 -7.225472 -6.931472 -3.081975 -8.567854 -5.378472 0.002089 0.002073 ... 0.001989 0.002168 0.002176 0.002123 0.002079 0.002081 0.002106 0.002167 0.002149 0.002185 3 4 0.345974 1268.624884 -7.461157 -5.853334 -3.044711 -5.149378 -3.815568 0.002523 0.002392 ... 0.002745 0.003947 0.004296 0.003528 0.003352 0.003629 0.003929 0.004363 0.004216 0.004442 4 5 0.733184 1707.323564 -4.140844 -7.460278 -3.181793 -5.996593 -4.535345 0.002957 0.002924 ... 0.003402 0.003575 0.003667 0.003740 0.003823 0.003904 0.003897 0.004004 0.004111 0.004121 5 6 0.161165 620.185809 -4.875000 -5.074766 -3.861240 -5.388011 -8.390503 0.000444 0.000442 ... 0.000432 0.000486 0.000473 0.000462 0.000447 0.000455 0.000455 0.000457 0.000463 0.000474 6 7 0.194312 900.597575 -8.299899 -6.850709 -4.314491 -3.712038 -3.951455 0.001794 0.001721 ... 0.001048 0.001052 0.000948 0.000976 0.001122 0.001274 0.001395 0.001522 0.001456 0.001823 7 8 1.132685 1176.443900 -6.765865 -7.398548 -3.378307 -3.763737 -5.881384 0.012950 0.012946 ... 0.014019 0.013871 0.013810 0.013902 0.014024 0.014150 0.014298 0.014392 0.014401 0.015042 8 9 0.158621 1189.209841 -8.376041 -6.321977 -3.243900 -8.711851 -3.449195 0.000444 0.000445 ... 0.000562 0.000595 0.000571 0.000590 0.000628 0.000663 0.000692 0.000734 0.000718 0.000736 9 10 0.660642 528.023669 -3.804286 -8.919378 -4.686964 -8.150277 -3.068319 0.008997 0.009035 ... 0.009435 0.009375 0.009315 0.009357 0.009563 0.009739 0.009821 0.009890 0.009819 0.009734 10 rows Ã— 60 columns\n# Columns of interest for planetary and chemical properties and transit depth feature_columns = df.columns[1:8] transit_depth_column = 'x1' # pick the first wavelength # Calculate mean and variance for features and transit depth feature_mean = df[feature_columns].mean() feature_variance = df[feature_columns].var() transit_depth_mean = df[transit_depth_column].mean() transit_depth_variance = df[transit_depth_column].var() # Visualize the distributions fig, axes = plt.subplots(1, 8, figsize=(18, 4)) for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[i]) axes[i].set_title(f'{col}\\nMean: {feature_mean[col]:.2f}\\nVariance: {feature_variance[col]:.2f}') # Add visualization for transit depth sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[-1]) axes[-1].set_title(f'{transit_depth_column}\\nMean: {transit_depth_mean:.2f}\\nVariance: {transit_depth_variance:.2f}') plt.tight_layout() plt.show() feature_mean, feature_variance, transit_depth_mean, transit_depth_variance (planet_radius 0.703714 planet_temp 1073.229674 log_h2o -5.934889 log_co2 -6.873009 log_co -4.497141 log_ch4 -5.799850 log_nh3 -6.051791 dtype: float64, planet_radius 0.198990 planet_temp 154495.743225 log_h2o 3.130868 log_co2 1.649658 log_co 0.738255 log_ch4 3.208283 log_nh3 3.050545 dtype: float64, 0.009442470522591322, 0.00016172106267489707) Exoplanet Feature Distributions The provided visualizations and statistics shed light on the distribution of various exoplanetary features and the observed transit depth at the x1 wavelength.\nPlanet Radius: This feature, with a mean value of approximately 0.7037 and variance of 0.1989, mostly lies between 0.5 and 1.5 as depicted in its histogram.\nPlanet Temperature: Exhibiting a wider spread, the temperature has a mean of approximately 1073.29 K and variance of 154495.74 KÂ².\nLogarithmic Concentrations:\nHâ‚‚O: Mean concentration of -5.93 with a variance of 3.13. COâ‚‚: Mean concentration of -6.87 with a variance of 1.65. CO: Mean concentration of -4.50 with a variance of 0.74. CHâ‚„: Mean concentration of -5.80 with a variance of 3.21. NHâ‚ƒ: Mean concentration of -6.05 with a variance of 3.05. Transit Depth at x1 Wavelength: This depth, crucial for exoplanet detection, has an almost singular value near 0, with a mean of approximately 0.0094 and a negligible variance of 0.00006.\nThese distributions and their accompanying statistics offer invaluable insights into the data\u0026rsquo;s nature and its inherent variability, essential for accurate spectral analysis and interpretation.\n# Import required libraries for modeling and SHAP values import xgboost as xgb import shap # Prepare the feature matrix (X) and the target vector (y) X = df.iloc[:, 1:8] y = df['x1'] # Train an XGBoost model model = xgb.XGBRegressor(objective ='reg:squarederror') model.fit(X, y) # Initialize the SHAP explainer explainer = shap.Explainer(model) # Calculate SHAP values shap_values = explainer(X) # Summary plot for SHAP values shap.summary_plot(shap_values, X, title='Shapley Feature Importance') SHAP (SHapley Additive exPlanations) values stem from cooperative game theory and provide a way to interpret machine learning model predictions. Each feature in a model is analogous to a player in a game, and the contribution of each feature to a prediction is like the payout a player receives in the game. In SHAP, we calculate the value of each feature by considering all possible combinations (coalitions) of features, assessing the change in prediction with and without that feature. The resulting value, the Shapley value, represents the average contribution of a feature to all possible predictions.\nThe summary plot visualizes these values. Each dot represents a SHAP value for a specific instance of a feature; positive values (right of the centerline) indicate that a feature increases the model\u0026rsquo;s output, while negative values (left of the centerline) suggest a decrease. The color depicts the actual value of the feature for the given instance, enabling a comprehensive view of feature influence across the dataset.\n# Import the Random Forest Regressor and visualization libraries from sklearn.ensemble import RandomForestRegressor # Train a Random Forest model rf_model = RandomForestRegressor(n_estimators=100, random_state=42) rf_model.fit(X, y) # Extract feature importances feature_importances = rf_model.feature_importances_ # Create a DataFrame for visualization importance_df = pd.DataFrame({ 'Feature': feature_columns, 'Importance': feature_importances }).sort_values(by='Importance', ascending=True) # Create a horizontal bar chart for feature importances plt.figure(figsize=(10, 6)) plt.barh(importance_df['Feature'], importance_df['Importance'], color='dodgerblue') plt.xlabel('Importance') plt.ylabel('') plt.title('Random Forest Feature Importance') plt.xticks(fontsize=13) # Increase the font size of the x-axis tick labels plt.yticks(fontsize=14) # Increase the font size of the x-axis tick labels # Save the figure before showing it plt.savefig('random_forest_importance_plot.png', bbox_inches='tight', dpi=300) # 'bbox_inches' ensures the entire plot is saved plt.show() feature_importances array([0.71850575, 0.10367982, 0.01655567, 0.07232808, 0.05603188, 0.0146824 , 0.0182164 ]) Random Forest Feature Importance Analysis To gain insights into which exoplanetary features most influence the observed transit depth, a Random Forest Regressor was utilized. Here\u0026rsquo;s an outline of the procedure:\nModel Initialization: A Random Forest Regressor model was instantiated with 100 trees and a fixed random seed of 42 for reproducibility.\nModel Training: The model was trained on the feature set X and target variable y.\nFeature Importance Extraction: After training, the importance of each feature was extracted using the feature_importances_ attribute of the trained model.\nData Preparation for Visualization: A DataFrame was created to house each feature alongside its respective importance. The features were then sorted in ascending order of importance for better visualization.\nVisualization: A horizontal bar chart was plotted to showcase the importance of each feature. The chart offers a clear visual comparison, with the y-axis representing the features and the x-axis indicating their importance. Special attention was paid to font size adjustments for better readability. Furthermore, before displaying the chart, it was saved as a PNG image with high resolution.\nThe resulting visualization, titled \u0026lsquo;Random Forest Feature Importance\u0026rsquo;, provides a clear understanding of the relative significance of each feature in predicting the transit depth, as discerned by the Random Forest model.\nfrom IPython.display import Image Image(filename='PME.png') PME Feature Importance Analysis Using a modeling technique, the impact of different exoplanetary features on the observed transit depth was assessed, and their importance was visualized in the attached figure titled \u0026lsquo;PME Feature Importance\u0026rsquo;. Here\u0026rsquo;s a breakdown of the visual representation:\nMost Influential Feature: The planet_radius stands out as the most influential feature with the highest PME (Predictive Modeling Estimate) value. This suggests that the radius of the planet plays a pivotal role in determining the observed transit depth.\nOther Features: Logarithmic concentrations of gases, such as log_co2, log_co, log_nh3, log_h2o, and log_ch4, also exhibit varying degrees of importance. Among these, log_co2 and log_co are the more significant contributors compared to others.\nLeast Influential Feature: The planet_temp, representing the temperature of the planet, has the least importance in this analysis, suggesting its minimal role in influencing the transit depth, at least according to the PME metric.\nVisual Clarity: The horizontal bar chart offers a lucid comparison of feature importances. Each bar\u0026rsquo;s length represents the PME value of a feature, providing a direct visual cue to its significance.\nInterpretation: This visualization aids in discerning which exoplanetary characteristics are most relevant when predicting the transit depth using the given model. It can guide future analyses by highlighting key features to focus on or, conversely, those that might be less consequential.\nBy examining the \u0026lsquo;PME Feature Importance\u0026rsquo; chart, one gains a deeper understanding of the relative significance of each feature in predicting the transit depth within this specific modeling context.\nUncertainty Quantification and Feature Reduction in PME Feature Importance Analysis When delving deep into the realms of uncertainty quantification and feature reduction in predictive modeling, it\u0026rsquo;s crucial to evaluate feature importance metrics critically. The provided PME (Predictive Modeling Estimate) Feature Importance Analysis offers a valuable lens for this task. Below is a nuanced exploration of its significance in the described contexts:\nUncertainty Quantification: Origin of Uncertainty:\nIn exoplanetary spectral analysis, uncertainty can arise from observational noise, instrumental errors, or intrinsic variability of the observed phenomena. This uncertainty often manifests in the form of error bars in spectra, like the ones shown in transit depth against wavelengths. Feature Impact on Uncertainty:\nThe degree of influence a feature has on the predicted outcome can be a proxy for how that feature might contribute to the overall predictive uncertainty. If a feature like planet_radius has a high PME value, it might be a critical determinant of transit depth. Any uncertainty in measuring or estimating the planet_radius could propagate and significantly affect the prediction\u0026rsquo;s reliability. PME as a Measure of Stochastic Uncertainty:\nThe PME values themselves might be obtained by analyzing a model\u0026rsquo;s sensitivity to perturbations in input features. A high PME value indicates that slight changes in the feature can lead to notable changes in the output, thereby implying a greater inherent stochastic uncertainty tied to that feature. Feature Reduction: Identifying Critical Features:\nWhen dealing with a multitude of features, not all may be equally relevant. The PME analysis provides a hierarchy of feature importance. In this case, while planet_radius emerges as crucial, planet_temp appears less consequential. This differentiation is fundamental for feature reduction, guiding us on which features to prioritize in modeling. Reducing Dimensionality \u0026amp; Complexity:\nIn data-driven modeling, especially with limited data points, overfitting is a genuine concern. By understanding which features significantly influence the predictions (like planet_radius or log_co2), one can potentially reduce the model\u0026rsquo;s complexity and the risk of overfitting by focusing only on these paramount features. Informing Experimental Design:\nIf further observational or experimental data is required, knowing feature importances can guide where resources are channeled. For instance, more precise measurements might be sought for features with high PME values, as their accurate estimation is vital for reliable predictions. Trade-off with Predictive Performance:\nIt\u0026rsquo;s essential to understand that while feature reduction can simplify models and make them more interpretable, there\u0026rsquo;s always a trade-off with predictive performance. Removing features based on their PME values should be done judiciously, ensuring that the model\u0026rsquo;s predictive capability isn\u0026rsquo;t unduly compromised. In summary, the \u0026lsquo;PME Feature Importance\u0026rsquo; chart isn\u0026rsquo;t merely a representation of feature significance but serves as a cornerstone for rigorous analytical decisions in uncertainty quantification and feature reduction. Analyzing such importance metrics within the broader context of the problem at hand ensures that models are both robust and interpretable, catering effectively to the dual objectives of predictive accuracy and analytical clarity.\nWeighted Principal Component Analysis (PCA) on Exoplanet Data Conceptual Overview: PCA is a method used to emphasize variation and capture strong patterns in a dataset. The \u0026ldquo;weighted PCA\u0026rdquo; approach fine-tunes this by considering the importance of different features, effectively giving more attention to features deemed vital.\nDetailed Breakdown: Standardization:\nBefore applying PCA, the dataset is standardized to give each feature a mean of 0 and a variance of 1. This is essential because PCA is influenced by the scale of the data. Weighted Features:\nFeatures are weighted according to their importance, as identified by the Random Forest model. Taking the square root of the weights ensures proper scaling during matrix multiplication in PCA. PCA Application:\nPCA projects the data into a new space defined by its principal components. The first two components often hold most of the dataset\u0026rsquo;s variance, making them crucial for visualization. Visualization:\nThe scatter plot visualizes the data in the space of the first two principal components. The color indicates Transit Depth (x1), shedding light on how this parameter varies across the main patterns in the data. Explained Variance:\nThis provides an understanding of how much original variance the first two components capture. A high percentage indicates that the PCA representation retains much of the data\u0026rsquo;s original structure. Significance: Data Compression:\nPCA offers a simplified yet rich representation of the data, which can be invaluable for visualization and pattern recognition. Feature Emphasis:\nUsing feature importances ensures the PCA representation highlights the most critical patterns related to influential features. Framework for Further Exploration:\nObserving patterns or groupings in the PCA plot can guide subsequent investigations, pinpointing areas of interest or potential clusters. Efficient Data Overview:\nThe visualization provides a comprehensive but digestible overview of the data, suitable for a wide range of audiences. In essence, weighted PCA melds the dimensionality reduction capabilities of PCA with the interpretative power of feature importances, offering a profound view into the dataset\u0026rsquo;s intricate structures and relationships.\nfrom sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA # The square root is used because each feature contributes to both rows and columns in the dot product calculation X_weighted = X_scaled * np.sqrt(feature_importances) # Perform PCA on the weighted data pca = PCA(n_components=2) X_pca = pca.fit_transform(X_weighted) # Plotting the first two principal components plt.figure(figsize=(10, 7)) plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', edgecolor='k', s=40) plt.colorbar().set_label('Transit Depth (x1)', rotation=270, labelpad=15) plt.xlabel('Weighted Principal Component 1') plt.ylabel('Weighted Principal Component 2') plt.title('Weighted PCA: First Two Principal Components') plt.show() # Variance explained by the first two principal components variance_explained = pca.explained_variance_ratio_ variance_explained array([0.71985328, 0.10370239]) from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Your data initialization (this part is assumed, as you haven't provided it in the original code) # X, y, feature_importances = ... # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA X_weighted = X_scaled * np.sqrt(feature_importances) # Perform PCA on the weighted data with three components pca = PCA(n_components=3) X_pca = pca.fit_transform(X_weighted) # Plotting the first three principal components fig = plt.figure(figsize=(10, 7)) ax = fig.add_subplot(111, projection='3d') scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], X_pca[:, 2], c=y, cmap='viridis', edgecolor='k', s=40) plt.colorbar(scatter, ax=ax, pad=0.2).set_label('Transit Depth (x1)', rotation=270, labelpad=15) ax.set_xlabel('Weighted Principal Component 1') ax.set_ylabel('Weighted Principal Component 2') ax.set_zlabel('Weighted Principal Component 3') plt.title('Weighted PCA: First Three Principal Components') plt.show() # Variance explained by the first three principal components variance_explained = pca.explained_variance_ratio_ variance_explained array([0.71985328, 0.10370239, 0.07160805]) # side by side from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Your data initialization (this part is assumed, as you haven't provided it in the original code) # X, y, feature_importances = ... # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA X_weighted = X_scaled * np.sqrt(feature_importances) # Create a combined figure with subplots fig, axes = plt.subplots(1, 2, figsize=(20, 7)) # Perform PCA on the weighted data with two components and plot pca2 = PCA(n_components=2) X_pca2 = pca2.fit_transform(X_weighted) scatter_2d = axes[0].scatter(X_pca2[:, 0], X_pca2[:, 1], c=y, cmap='viridis', edgecolor='k', s=40) fig.colorbar(scatter_2d, ax=axes[0], orientation='vertical').set_label('Transit Depth (x1)', rotation=270, labelpad=15) axes[0].set_xlabel('Weighted Principal Component 1') axes[0].set_ylabel('Weighted Principal Component 2') axes[0].set_title('Weighted PCA: First Two Principal Components') # Perform PCA on the weighted data with three components and plot pca3 = PCA(n_components=3) X_pca3 = pca3.fit_transform(X_weighted) ax3d = fig.add_subplot(1, 2, 2, projection='3d') scatter_3d = ax3d.scatter(X_pca3[:, 0], X_pca3[:, 1], X_pca3[:, 2], c=y, cmap='viridis', edgecolor='k', s=40) fig.colorbar(scatter_3d, ax=ax3d, pad=0.2).set_label('Transit Depth (x1)', rotation=270, labelpad=15) ax3d.set_xlabel('Weighted Principal Component 1') ax3d.set_ylabel('Weighted Principal Component 2') ax3d.set_zlabel('Weighted Principal Component 3') ax3d.set_title('Weighted PCA: First Three Principal Components') # Display the combined plot plt.tight_layout() plt.savefig('wPCA_2D_3D.png', bbox_inches='tight', dpi=300) # 'bbox_inches' ensures the entire plot is saved plt.show() import pandas as pd import seaborn as sns # Your data initialization (this part is assumed, as you haven't provided it in the original code) # df, feature_columns, transit_depth_column = ... # Reconstruct the approximate original data using the first three principal components reconstructed_data = np.dot(X_pca, pca.components_[:3, :]) + np.mean(X_scaled, axis=0) # Create a DataFrame for the reconstructed data reconstructed_df = pd.DataFrame(reconstructed_data, columns=feature_columns) # Visualize the approximate original histograms fig, axes = plt.subplots(1, len(feature_columns) + 1, figsize=(18, 4)) # Adjusted for the number of features for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df[col], bins=20, kde=True, ax=axes[i], color='orange') axes[i].set_title(f'Approx of {col}') # Add visualization for actual transit depth (since it was not part of the PCA) sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[-1], color='green') axes[-1].set_title(f'Actual {transit_depth_column}') plt.tight_layout() plt.show() fig, axes = plt.subplots(2, 8, figsize=(18, 8)) # Original Data for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[0, i]) axes[0, i].set_title(f'{col}\\nMean: {feature_mean[col]:.2f}\\nVariance: {feature_variance[col]:.2f}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[0, -1]) axes[0, -1].set_title(f'{transit_depth_column}\\nMean: {transit_depth_mean:.2f}\\nVariance: {transit_depth_variance:.2f}') # Reconstructed Data for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df[col], bins=20, kde=True, ax=axes[1, i], color='orange') axes[1, i].set_title(f'Surrogate of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[1, -1], color='green') axes[1, -1].set_title(f'Actual {transit_depth_column}') plt.tight_layout() plt.show() import pandas as pd import seaborn as sns import matplotlib.pyplot as plt from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import numpy as np # Assuming data initialization and feature_importances, feature_columns, and transit_depth_column definitions exist # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA X_weighted = X_scaled * np.sqrt(feature_importances) # Initialize the figure and axes fig, axes = plt.subplots(3, len(feature_columns) + 1, figsize=(18, 12)) # Original Data histograms for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[0, i]) axes[0, i].set_title(f'Original {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[0, -1]) axes[0, -1].set_title(f'Original {transit_depth_column}') # Reconstruction using 2 PCs pca2 = PCA(n_components=2) X_pca2 = pca2.fit_transform(X_weighted) reconstructed_data_2PCs = np.dot(X_pca2, pca2.components_[:2, :]) + np.mean(X_scaled, axis=0) reconstructed_df_2PCs_wPCA = pd.DataFrame(reconstructed_data_2PCs, columns=feature_columns) for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df_2PCs_wPCA[col], bins=20, kde=True, ax=axes[1, i], color='orange') axes[1, i].set_title(f'2 PCs of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[1, -1], color='green') axes[1, -1].set_title(f'Original {transit_depth_column}') # Reconstruction using 3 PCs pca3 = PCA(n_components=3) X_pca3 = pca3.fit_transform(X_weighted) reconstructed_data_3PCs = np.dot(X_pca3, pca3.components_[:3, :]) + np.mean(X_scaled, axis=0) reconstructed_df_3PCs_wPCA = pd.DataFrame(reconstructed_data_3PCs, columns=feature_columns) for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df_3PCs_wPCA[col], bins=20, kde=True, ax=axes[2, i], color='purple') axes[2, i].set_title(f'3 PCs of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[2, -1], color='green') axes[2, -1].set_title(f'Original {transit_depth_column}') plt.tight_layout() plt.savefig('wPCA_combined_plot.png', bbox_inches='tight', dpi=500) # 'bbox_inches' ensures the entire plot is saved plt.show() Reconstruction of Exoplanet Data Using Principal Component Analysis (PCA) The code segment aims to reconstruct exoplanet data using different numbers of principal components (PCs) from PCA, offering insights into how much information retention occurs as we vary the number of PCs.\nData Standardization: The features undergo standardization, ensuring each feature has a mean of 0 and variance of 1. This normalization is crucial for PCA, as the algorithm is sensitive to varying scales across features. Weighted Features: Features are adjusted based on their significance as ascertained by a prior model, specifically the Random Forest. Weighting the features adjusts the emphasis the PCA places on each feature during the dimensionality reduction process. Data Reconstruction: After performing PCA, the algorithm seeks to transform the reduced data back to the original high-dimensional space. This \u0026ldquo;reconstructed\u0026rdquo; data is an approximation of the original but is built using fewer dimensions. Visualization of Reconstructions: Original Data Histograms:\nThe initial histograms show the distributions of the original features and the transit depth. Reconstruction Using 2 Principal Components:\nUsing only the first two PCs, the data is reconstructed and its histograms visualized. This illustrates the patterns and distributions captured when only the first two components are considered. Reconstruction Using 3 Principal Components:\nAn analogous reconstruction is done with three PCs. The addition of a third dimension might capture more nuanced variations in the data. Significance: Data Compression vs. Retention:\nThe visualizations enable us to compare the reconstructions against the original data. We discern how much information is retained and what is lost as we reduce dimensions. Guide for Dimensionality Decision:\nBy juxtaposing the original with the reconstructions, we gain insights into the optimal number of PCs to use for specific tasks, striking a balance between compression and information retention. Empirical Understanding:\nThese histograms and visual representations offer a tangible way to grasp the abstract notion of dimensionality reduction. They elucidate how PCA captures the essence of the data while diminishing dimensions. In conclusion, this analysis, coupled with the visualizations, equips us with a robust understanding of how PCA reconstructs data using varying numbers of components. It underscores the trade-offs involved and the implications of choosing specific dimensionality levels in data-driven tasks.\nfrom sklearn.decomposition import KernelPCA # Apply Kernel PCA on the weighted data kpca = KernelPCA(n_components=2, kernel='rbf') X_kpca = kpca.fit_transform(X_weighted) Choice of Kernels: The \u0026lsquo;kernel\u0026rsquo; parameter in \u0026lsquo;KernelPCA\u0026rsquo; allows you to specify the desired kernel. Available options include:\n\u0026rsquo; linear\u0026rsquo; : Linear kernel \u0026lsquo;poly\u0026rsquo; : Polynomial kernel \u0026rsquo; rbf \u0026lsquo;: Radial basis function (RBF) or Gaussian kernel \u0026rsquo; sigmoid \u0026lsquo;: Sigmoid kernel \u0026lsquo;cosine\u0026rsquo; : Cosine similarity \u0026rsquo; precomputed \u0026lsquo;: If you have precomputed the kernel matrix import numpy as np import matplotlib.pyplot as plt from sklearn.decomposition import KernelPCA from sklearn.preprocessing import StandardScaler import seaborn as sns import pandas as pd from mpl_toolkits.mplot3d import Axes3D # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA X_weighted = X_scaled * np.sqrt(feature_importances) # Initialize the figure and axes fig, axes = plt.subplots(3, len(feature_columns) + 1, figsize=(18, 12)) # Original Data histograms for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[0, i]) axes[0, i].set_title(f'Original {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[0, -1]) axes[0, -1].set_title(f'Original {transit_depth_column}') # Kernel PCA with 2 components kpca2 = KernelPCA(n_components=2, kernel='rbf', gamma=0.1, fit_inverse_transform=True) X_kpca2 = kpca2.fit_transform(X_weighted) reconstructed_data_2PCs = kpca2.inverse_transform(X_kpca2) reconstructed_df_2PCs_kPCA_rbf = pd.DataFrame(reconstructed_data_2PCs, columns=feature_columns) for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df_2PCs_kPCA_rbf[col], bins=20, kde=True, ax=axes[1, i], color='orange') axes[1, i].set_title(f'2 PCs of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[1, -1], color='green') axes[1, -1].set_title(f'Original {transit_depth_column}') # Kernel PCA with 3 components kpca3 = KernelPCA(n_components=3, kernel='rbf', gamma=0.1, fit_inverse_transform=True) X_kpca3 = kpca3.fit_transform(X_weighted) reconstructed_data_3PCs = kpca3.inverse_transform(X_kpca3) reconstructed_df_3PCs_kPCA_rbf = pd.DataFrame(reconstructed_data_3PCs, columns=feature_columns) for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df_3PCs_kPCA_rbf[col], bins=20, kde=True, ax=axes[2, i], color='purple') axes[2, i].set_title(f'3 PCs of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[2, -1], color='green') axes[2, -1].set_title(f'Original {transit_depth_column}') plt.tight_layout() plt.savefig('wKPCA_combined_plot.png', bbox_inches='tight', dpi=500) plt.show() # Standardize the feature matrix X_scaled = StandardScaler().fit_transform(X) # Multiply each feature by its square root of importance weight for weighted PCA X_weighted = X_scaled * np.sqrt(feature_importances) # Initialize the figure and axes fig, axes = plt.subplots(3, len(feature_columns) + 1, figsize=(18, 12)) # Original Data histograms for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[0, i]) axes[0, i].set_title(f'Original {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[0, -1]) axes[0, -1].set_title(f'Original {transit_depth_column}') # Kernel PCA with 2 components kpca2 = KernelPCA(n_components=2, kernel='poly', degree=2, coef0=1, fit_inverse_transform=True) X_kpca2 = kpca2.fit_transform(X_weighted) reconstructed_data_2PCs = kpca2.inverse_transform(X_kpca2) reconstructed_df_2PCs_kPCA_poly = pd.DataFrame(reconstructed_data_2PCs, columns=feature_columns) for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df_2PCs_kPCA_poly[col], bins=20, kde=True, ax=axes[1, i], color='orange') axes[1, i].set_title(f'2 PCs of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[1, -1], color='green') axes[1, -1].set_title(f'Original {transit_depth_column}') # Kernel PCA with 3 components kpca3 = KernelPCA(n_components=3, kernel='poly', degree=2, coef0=1, fit_inverse_transform=True) X_kpca3 = kpca3.fit_transform(X_weighted) reconstructed_data_3PCs = kpca3.inverse_transform(X_kpca3) reconstructed_df_3PCs_kPCA_poly = pd.DataFrame(reconstructed_data_3PCs, columns=feature_columns) for i, col in enumerate(feature_columns): sns.histplot(reconstructed_df_3PCs_kPCA_poly[col], bins=20, kde=True, ax=axes[2, i], color='purple') axes[2, i].set_title(f'3 PCs of {col}') sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[2, -1], color='green') axes[2, -1].set_title(f'Original {transit_depth_column}') plt.tight_layout() plt.savefig('wKPCA_combined_plot.png', bbox_inches='tight', dpi=500) plt.show() from sklearn.metrics import mean_squared_error mse_wPCA = mean_squared_error(X_scaled, reconstructed_df_3PCs_wPCA) mse_rbf = mean_squared_error(X_scaled, reconstructed_df_3PCs_kPCA_rbf) mse_poly = mean_squared_error(X_scaled, reconstructed_df_3PCs_kPCA_poly) import pandas as pd # Creating a dictionary with the methods and their respective MSEs data = { 'Method': ['Weighted PCA', 'Kernel PCA (RBF)', 'Kernel PCA (Poly)'], 'MSE (3 PCs)': [ mean_squared_error(X_scaled, reconstructed_df_3PCs_wPCA), mean_squared_error(X_scaled, reconstructed_df_3PCs_kPCA_rbf), mean_squared_error(X_scaled, reconstructed_df_3PCs_kPCA_poly) ] } # Converting the dictionary to a pandas DataFrame mse_table = pd.DataFrame(data) # Displaying the table print(mse_table) Method MSE (3 PCs) 0 Weighted PCA 0.715436 1 Kernel PCA (RBF) 0.795583 2 Kernel PCA (Poly) 0.736338 import pandas as pd df_original = pd.DataFrame(X_scaled, columns=feature_columns) correlation_original = df_original.corr() correlation_wPCA_3PCs = reconstructed_df_3PCs_wPCA.corr() correlation_kPCA_rbf_3PCs = reconstructed_df_3PCs_kPCA_rbf.corr() correlation_kPCA_poly_3PCs = reconstructed_df_3PCs_kPCA_poly.corr() correlation_wPCA_2PCs = reconstructed_df_2PCs_wPCA.corr() correlation_kPCA_rbf_2PCs = reconstructed_df_2PCs_kPCA_rbf.corr() correlation_kPCA_poly_2PCs = reconstructed_df_2PCs_kPCA_poly.corr() import seaborn as sns import matplotlib.pyplot as plt # Function to visualize correlation matrix def visualize_corr(corr_matrix, title): plt.figure(figsize=(10, 8)) sns.heatmap(corr_matrix, cmap='coolwarm', annot=True, fmt=\u0026quot;.2f\u0026quot;, linewidths=0.5) plt.title(title) plt.show() # Visualize original data's correlation matrix visualize_corr(correlation_original, \u0026quot;Original Data Correlation Matrix\u0026quot;) # Visualize reconstructed data's correlation matrices for 3 PCs visualize_corr(correlation_wPCA_3PCs, \u0026quot;3 PCs Weighted PCA Correlation Matrix\u0026quot;) visualize_corr(correlation_kPCA_rbf_3PCs, \u0026quot;3 PCs Kernel PCA (RBF) Correlation Matrix\u0026quot;) visualize_corr(correlation_kPCA_poly_3PCs, \u0026quot;3 PCs Kernel PCA (Poly) Correlation Matrix\u0026quot;) import matplotlib.pyplot as plt import matplotlib.image as mpimg import matplotlib.gridspec as gridspec # Load images img_shap = mpimg.imread('shapley.png') img_rf = mpimg.imread('random_forest_importance_plot.png') img_pme = mpimg.imread('PME.png') # Create a grid for the subplots fig_combined = plt.figure(figsize=(20, 12)) gs = gridspec.GridSpec(2, 2, width_ratios=[1, 1]) # Display SHAP plot ax0 = plt.subplot(gs[0]) ax0.imshow(img_shap) ax0.axis('off') # Display RF Importance plot ax1 = plt.subplot(gs[1]) ax1.imshow(img_rf) ax1.axis('off') # Display PME image in the middle of the 2nd row ax2 = plt.subplot(gs[2:4]) # This makes the PME plot span both columns on the second row ax2.imshow(img_pme) ax2.axis('off') plt.tight_layout() plt.savefig('sensitivity_combined_plot.png', bbox_inches='tight', dpi=300) # 'bbox_inches' ensures the entire plot is saved plt.show() This code snippet consolidates and displays three distinct plotsâ€”SHAP values, Random Forest Feature Importance, and PME Feature Importanceâ€”into a single visualization. The images are loaded and arranged in a 2x2 grid, with the SHAP and Random Forest plots on the top row, and the PME plot spanning both columns on the bottom row. After layout adjustments, the combined visualization is saved as a high-resolution PNG image titled \u0026lsquo;sensitivity_combined_plot.png\u0026rsquo; and then displayed.\nReference Changeat, Q., \u0026amp; Yip, K. H. (2023). ESA-Ariel Data Challenge NeurIPS 2022: Introduction to exo-atmospheric studies and presentation of the Atmospheric Big Challenge (ABC) Database. arXiv preprint arXiv:2206.14633.\nHerin, M., Il Idrissi, M., Chabridon, V., \u0026amp; Iooss, B. (2022). Proportional marginal effects for global sensitivity analysis. arXiv preprint arXiv:2210.13065.\n","date":1687132800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1687132800,"objectID":"a568a3e7e71a63efbc399b0047ca9f9e","permalink":"/project/internal-project/wpca-exoplanet/","publishdate":"2023-06-19T00:00:00Z","relpermalink":"/project/internal-project/wpca-exoplanet/","section":"project","summary":"# Import required libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns The figure below showcases a spectrum integral to exoplanet detection, charting the transit depth against the wavelength in microns.","tags":["Variable Importance","Dimension Reduction"],"title":"Exoplanet Detection Using Reduced Dimensions","type":"project"},{"authors":["Deepak Bastola"],"categories":null,"content":"The figure below showcases a spectrum integral to exoplanet detection, charting the transit depth against the wavelength in microns. Every observation point in the spectrum carries an inherent uncertainty, denoted by the vertical error bars. To decode and potentially minimize this uncertainty, it\u0026rsquo;s pivotal to fathom how features like planet radius, planet temperature, and the logarithmic concentrations of Hâ‚‚O, COâ‚‚, CO, CHâ‚„, and NHâ‚ƒ influence the transit depth. Leveraging interpretative tools like SHAP can provide insights into how these exoplanetary features impact the observed transit depth, refining our understanding and accuracy in exoplanet spectral analysis.\n# Import required libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from IPython.display import Image Image(filename='my_spectrum.png') # Load the CSV file into a Pandas DataFrame df = pd.read_csv(\u0026quot;small_astro.csv\u0026quot;) df_backup = df.copy() df_backup.head(10) Unnamed: 0 planet_radius planet_temp log_h2o log_co2 log_co log_ch4 log_nh3 x1 x2 ... x43 x44 x45 x46 x47 x48 x49 x50 x51 x52 0 1 0.559620 863.394770 -8.865868 -6.700707 -5.557561 -8.957615 -3.097540 0.003836 0.003834 ... 0.003938 0.003941 0.003903 0.003931 0.003983 0.004019 0.004046 0.004072 0.004054 0.004056 1 2 1.118308 1201.700465 -4.510258 -8.228966 -3.565427 -7.807424 -3.633658 0.015389 0.015148 ... 0.015450 0.015447 0.015461 0.015765 0.016099 0.016376 0.016549 0.016838 0.016781 0.016894 2 3 0.400881 1556.096477 -7.225472 -6.931472 -3.081975 -8.567854 -5.378472 0.002089 0.002073 ... 0.001989 0.002168 0.002176 0.002123 0.002079 0.002081 0.002106 0.002167 0.002149 0.002185 3 4 0.345974 1268.624884 -7.461157 -5.853334 -3.044711 -5.149378 -3.815568 0.002523 0.002392 ... 0.002745 0.003947 0.004296 0.003528 0.003352 0.003629 0.003929 0.004363 0.004216 0.004442 4 5 0.733184 1707.323564 -4.140844 -7.460278 -3.181793 -5.996593 -4.535345 0.002957 0.002924 ... 0.003402 0.003575 0.003667 0.003740 0.003823 0.003904 0.003897 0.004004 0.004111 0.004121 5 6 0.161165 620.185809 -4.875000 -5.074766 -3.861240 -5.388011 -8.390503 0.000444 0.000442 ... 0.000432 0.000486 0.000473 0.000462 0.000447 0.000455 0.000455 0.000457 0.000463 0.000474 6 7 0.194312 900.597575 -8.299899 -6.850709 -4.314491 -3.712038 -3.951455 0.001794 0.001721 ... 0.001048 0.001052 0.000948 0.000976 0.001122 0.001274 0.001395 0.001522 0.001456 0.001823 7 8 1.132685 1176.443900 -6.765865 -7.398548 -3.378307 -3.763737 -5.881384 0.012950 0.012946 ... 0.014019 0.013871 0.013810 0.013902 0.014024 0.014150 0.014298 0.014392 0.014401 0.015042 8 9 0.158621 1189.209841 -8.376041 -6.321977 -3.243900 -8.711851 -3.449195 0.000444 0.000445 ... 0.000562 0.000595 0.000571 0.000590 0.000628 0.000663 0.000692 0.000734 0.000718 0.000736 9 10 0.660642 528.023669 -3.804286 -8.919378 -4.686964 -8.150277 -3.068319 0.008997 0.009035 ... 0.009435 0.009375 0.009315 0.009357 0.009563 0.009739 0.009821 0.009890 0.009819 0.009734 10 rows Ã— 60 columns\n# Columns of interest for planetary and chemical properties and transit depth feature_columns = df.columns[1:8] transit_depth_column = 'x1' # pick the first wavelength # Calculate mean and variance for features and transit depth feature_mean = df[feature_columns].mean() feature_variance = df[feature_columns].var() transit_depth_mean = df[transit_depth_column].mean() transit_depth_variance = df[transit_depth_column].var() # Visualize the distributions fig, axes = plt.subplots(1, 8, figsize=(18, 4)) for i, col in enumerate(feature_columns): sns.histplot(df[col], bins=20, kde=True, ax=axes[i]) axes[i].set_title(f'{col}\\nMean: {feature_mean[col]:.2f}\\nVariance: {feature_variance[col]:.2f}') # Add visualization for transit depth sns.histplot(df[transit_depth_column], bins=20, kde=True, ax=axes[-1]) axes[-1].set_title(f'{transit_depth_column}\\nMean: {transit_depth_mean:.2f}\\nVariance: {transit_depth_variance:.2f}') plt.tight_layout() plt.show() feature_mean, feature_variance, transit_depth_mean, transit_depth_variance (planet_radius 0.703714 planet_temp 1073.229674 log_h2o -5.934889 log_co2 -6.873009 log_co -4.497141 log_ch4 -5.799850 log_nh3 -6.051791 dtype: float64, planet_radius 0.198990 planet_temp 154495.743225 log_h2o 3.130868 log_co2 1.649658 log_co 0.738255 log_ch4 3.208283 log_nh3 3.050545 dtype: float64, 0.009442470522591322, 0.00016172106267489707) Exoplanet Feature Distributions The provided visualizations and statistics shed light on the distribution of various exoplanetary features and the observed transit depth at the x1 wavelength.\nPlanet Radius: This feature, with a mean value of approximately 0.7037 and variance of 0.1989, mostly lies between 0.5 and 1.5 as depicted in its histogram.\nPlanet Temperature: Exhibiting a wider spread, the temperature has a mean of approximately 1073.29 K and variance of 154495.74 KÂ².\nLogarithmic Concentrations:\nHâ‚‚O: Mean concentration of -5.93 with a variance of 3.13. COâ‚‚: Mean concentration of -6.87 with a variance of 1.65. CO: Mean concentration of -4.50 with a variance of 0.74. CHâ‚„: Mean concentration of -5.80 with a variance of 3.21. NHâ‚ƒ: Mean concentration of -6.05 with a variance of 3.05. Transit Depth at x1 Wavelength: This depth, crucial for exoplanet detection, has an almost singular value near 0, with a mean of approximately 0.0094 and a negligible variance of 0.00006.\nThese distributions and their accompanying statistics offer invaluable insights into the data\u0026rsquo;s nature and its inherent variability, essential for accurate spectral analysis and interpretation.\n# Import required libraries for modeling and SHAP values import xgboost as xgb import shap # Prepare the feature matrix (X) and the target vector (y) X = df.iloc[:, 1:8] y = df['x1'] # Train an XGBoost model model = xgb.XGBRegressor(objective ='reg:squarederror') model.fit(X, y) # Initialize the SHAP explainer explainer = shap.Explainer(model) # Calculate SHAP values shap_values = explainer(X) # Summary plot for SHAP values shap.summary_plot(shap_values, X, title='Shapley Feature Importance') Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console) SHAP (SHapley Additive exPlanations) values stem from cooperative game theory and provide a way to interpret machine learning model predictions. Each feature in a model is analogous to a player in a game, and the contribution of each feature to a prediction is like the payout a player receives in the game. In SHAP, we calculate the value of each feature by considering all possible combinations (coalitions) of features, assessing the change in prediction with and without that feature. The resulting value, the Shapley value, represents the average contribution of a feature to all possible predictions.\nThe summary plot visualizes these values. Each dot represents a SHAP value for a specific instance of a feature; positive values (right of the centerline) indicate that a feature increases the model\u0026rsquo;s output, while negative values (left of the centerline) suggest a decrease. The color depicts the actual value of the feature for the given instance, enabling a comprehensive view of feature influence across the dataset.\n# Import the Random Forest Regressor and visualization libraries from sklearn.ensemble import RandomForestRegressor # Train a Random Forest model rf_model = RandomForestRegressor(n_estimators=100, random_state=42) rf_model.fit(X, y) # Extract feature importances feature_importances = rf_model.feature_importances_ # Create a DataFrame for visualization importance_df = pd.DataFrame({ 'Feature': feature_columns, 'Importance': feature_importances }).sort_values(by='Importance', ascending=True) # Create a horizontal bar chart for feature importances plt.figure(figsize=(10, 6)) plt.barh(importance_df['Feature'], importance_df['Importance'], color='dodgerblue') plt.xlabel('Importance') plt.ylabel('') plt.title('Random Forest Feature Importance') plt.xticks(fontsize=13) # Increase the font size of the x-axis tick labels plt.yticks(fontsize=14) # Increase the font size of the x-axis tick labels # Save the figure before showing it plt.savefig('random_forest_importance_plot.png', bbox_inches='tight', dpi=300) # 'bbox_inches' ensures the entire plot is saved plt.show() feature_importances array([0.71850575, 0.10367982, 0.01655567, 0.07232808, 0.05603188, 0.0146824 , 0.0182164 ]) Random Forest Feature Importance Analysis To gain insights into which exoplanetary features most influence the observed transit depth, a Random Forest Regressor was utilized. Here\u0026rsquo;s an outline of the procedure:\nModel Initialization: A Random Forest Regressor model was instantiated with 100 trees and a fixed random seed of 42 for reproducibility.\nModel Training: The model was trained on the feature set X and target variable y.\nFeature Importance Extraction: After training, the importance of each feature was extracted using the feature_importances_ attribute of the trained model.\nData Preparation for Visualization: A DataFrame was created to house each feature alongside its respective importance. The features were then sorted in ascending order of importance for better visualization.\nVisualization: A horizontal bar chart was plotted to showcase the importance of each feature. The chart offers a clear visual comparison, with the y-axis representing the features and the x-axis indicating their importance. Special attention was paid to font size adjustments for better readability. Furthermore, before displaying the chart, it was saved as a PNG image with high resolution.\nThe resulting visualization, titled \u0026lsquo;Random Forest Feature Importance\u0026rsquo;, provides a clear understanding of the relative significance of each feature in predicting the transit depth, as discerned by the Random Forest model.\nfrom IPython.display import Image Image(filename='PME.png') PME Feature Importance Analysis Using a modeling technique, the impact of different exoplanetary features on the observed transit depth was assessed, and their importance was visualized in the attached figure titled \u0026lsquo;PME Feature Importance\u0026rsquo;. Here\u0026rsquo;s a breakdown of the visual representation:\nMost Influential Feature: The planet_radius stands out as the most influential feature with the highest PME (Proportional Marginal Effects) value. This suggests that the radius of the planet plays a pivotal role in determining the observed transit depth.\nOther Features: Logarithmic concentrations of gases, such as log_co2, log_co, log_nh3, log_h2o, and log_ch4, also exhibit varying degrees of importance. Among these, log_co2 and log_co are the more significant contributors compared to others.\nLeast Influential Feature: The planet_temp, representing the temperature of the planet, has the least importance in this analysis, suggesting its minimal role in influencing the transit depth, at least according to the PME metric.\nVisual Clarity: The horizontal bar chart offers a lucid comparison of feature importances. Each bar\u0026rsquo;s length represents the PME value of a feature, providing a direct visual cue to its significance.\nInterpretation: This visualization aids in discerning which exoplanetary characteristics are most relevant when predicting the transit depth using the given model. It can guide future analyses by highlighting key features to focus on or, conversely, those that might be less consequential.\nBy examining the \u0026lsquo;PME Feature Importance\u0026rsquo; chart, one gains a deeper understanding of the relative significance of each feature in predicting the transit depth within this specific modeling context.\nUncertainty Quantification and Feature Reduction in PME Feature Importance Analysis When delving deep into the realms of uncertainty quantification and feature reduction in predictive modeling, it\u0026rsquo;s crucial to evaluate feature importance metrics critically. The provided PME (Proportional Marginal Effects) Feature Importance Analysis offers a valuable lens for this task. Below is a nuanced exploration of its significance in the described contexts:\nUncertainty Quantification: Origin of Uncertainty:\nIn exoplanetary spectral analysis, uncertainty can arise from observational noise, instrumental errors, or intrinsic variability of the observed phenomena. This uncertainty often manifests in the form of error bars in spectra, like the ones shown in transit depth against wavelengths. Feature Impact on Uncertainty:\nThe degree of influence a feature has on the predicted outcome can be a proxy for how that feature might contribute to the overall predictive uncertainty. If a feature like planet_radius has a high PME value, it might be a critical determinant of transit depth. Any uncertainty in measuring or estimating the planet_radius could propagate and significantly affect the prediction\u0026rsquo;s reliability. PME as a Measure of Stochastic Uncertainty:\nThe PME values themselves might be obtained by analyzing a model\u0026rsquo;s sensitivity to perturbations in input features. A high PME value indicates that slight changes in the feature can lead to notable changes in the output, thereby implying a greater inherent stochastic uncertainty tied to that feature. Feature Reduction: Identifying Critical Features:\nWhen dealing with a multitude of features, not all may be equally relevant. The PME analysis provides a hierarchy of feature importance. In this case, while planet_radius emerges as crucial, planet_temp appears less consequential. This differentiation is fundamental for feature reduction, guiding us on which features to prioritize in modeling. Reducing Dimensionality \u0026amp; Complexity:\nIn data-driven modeling, especially with limited data points, overfitting is a genuine concern. By understanding which features significantly influence the predictions (like planet_radius or log_co2), one can potentially reduce the model\u0026rsquo;s complexity and the risk of overfitting by focusing only on these paramount features. Informing Experimental Design:\nIf further observational or experimental data is required, knowing feature importances can guide where resources are channeled. For instance, more precise measurements might be sought for features with high PME values, as their accurate estimation is vital for reliable predictions. Trade-off with Predictive Performance:\nIt\u0026rsquo;s essential to understand that while feature reduction can simplify models and make them more interpretable, there\u0026rsquo;s always a trade-off with predictive performance. Removing features based on their PME values should be done judiciously, ensuring that the model\u0026rsquo;s predictive capability isn\u0026rsquo;t unduly compromised. In summary, the \u0026lsquo;PME Feature Importance\u0026rsquo; chart isn\u0026rsquo;t merely a representation of feature significance but serves as a cornerstone for rigorous analytical decisions in uncertainty quantification and feature reduction. Analyzing such importance metrics within the broader context of the problem at hand ensures that models are both robust and interpretable, catering effectively to the dual objectives of predictive accuracy and analytical clarity.\nimport matplotlib.pyplot as plt import matplotlib.image as mpimg import matplotlib.gridspec as gridspec # Load images img_shap = mpimg.imread('shapley.png') img_rf = mpimg.imread('random_forest_importance_plot.png') img_pme = mpimg.imread('PME.png') # Create a grid for the subplots fig_combined = plt.figure(figsize=(20, 12)) gs = gridspec.GridSpec(2, 2, width_ratios=[1, 1]) # Display SHAP plot ax0 = plt.subplot(gs[0]) ax0.imshow(img_shap) ax0.axis('off') # Display RF Importance plot ax1 = plt.subplot(gs[1]) ax1.imshow(img_rf) ax1.axis('off') # Display PME image in the middle of the 2nd row ax2 = plt.subplot(gs[2:4]) # This makes the PME plot span both columns on the second row ax2.imshow(img_pme) ax2.axis('off') plt.tight_layout() plt.savefig('sensitivity_combined_plot.png', bbox_inches='tight', dpi=300) # 'bbox_inches' ensures the entire plot is saved plt.show() This code snippet consolidates and displays three distinct plotsâ€”SHAP values, Random Forest Feature Importance, and PME Feature Importanceâ€”into a single visualization. The images are loaded and arranged in a 2x2 grid, with the SHAP and Random Forest plots on the top row, and the PME plot spanning both columns on the bottom row. After layout adjustments, the combined visualization is saved as a high-resolution PNG image titled \u0026lsquo;sensitivity_combined_plot.png\u0026rsquo; and then displayed.\nReference Changeat, Q., \u0026amp; Yip, K. H. (2023). ESA-Ariel Data Challenge NeurIPS 2022: Introduction to exo-atmospheric studies and presentation of the Atmospheric Big Challenge (ABC) Database. arXiv preprint arXiv:2206.14633.\nHerin, M., Il Idrissi, M., Chabridon, V., \u0026amp; Iooss, B. (2022). Proportional marginal effects for global sensitivity analysis. arXiv preprint arXiv:2210.13065.\n","date":1684454400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684454400,"objectID":"0b7a1128495bf797da5b76250376085a","permalink":"/project/internal-project/exoplanet-modeling/","publishdate":"2023-05-19T00:00:00Z","relpermalink":"/project/internal-project/exoplanet-modeling/","section":"project","summary":"A detailed analysis of Exoplanets Modeling","tags":["Variable Importance, Uncertainty Quantification"],"title":"Exoplanet Detection: Informed Parameters \u0026 Spectral Error Minimization","type":"project"},{"authors":["Deepak Bastola"],"categories":["machine learning","data science","prediction"],"content":"It would be nice to predict the number of positive covid cases depending on past cases evolution. Regression models based on recurrent neural networks (RNNs) are proven to identify patterns in time series data and this allows us to make accurate short-term predictions.\nThe model used in the following example is based on long-term short-term memory (LSTM) model that uses more than one features to make informed predictions. LSTMs are recurrent neural networks that avoid the vanishing gradient problem prevalent in feed-forward type of algorithms by imposing filtering mechanisms in the gates using a technique known as back-propagation.\nThe following set of codes loads all the required Python libraries, packages, and subroutines required for LSTM modeling. This blog post is just intended to give a high level summary of how to realize a covid case count prediction in the United States using some convenient features readily available.\n# Import various libraries and routines needed for computation import math import pandas as pd import numpy as np import tensorflow as tf import matplotlib.pyplot as plt import keras.backend as K from math import sqrt from numpy import concatenate from matplotlib import pyplot from pandas import read_csv, DataFrame from sklearn.preprocessing import MinMaxScaler, LabelEncoder from sklearn.metrics import mean_squared_error, mean_absolute_error from keras.models import Sequential from keras.layers import Dense, Dropout, LSTM from keras.callbacks import EarlyStopping from datetime import date, timedelta, datetime # Read in the data file that has relevant features df = pd.read_csv('covid_final.csv') dataset = df.set_index(['date']) # Drop the last 10 row as they are incomplete dataset.drop(dataset.tail(10).index, inplace = True) values = dataset.values # Store the indexes (i.e., dates) date_index = dataset.index # Clean up the dataset more for predictions and inverse transformations (Re-scaling) data_clean = dataset.copy() data_clean_ext = dataset.copy() data_clean_ext['new_cases_predictions'] = data_clean_ext['new_cases_smoothed'] data_clean.tail() new_cases_smoothed reproduction_rate new_tests_smoothed_per_thousand new_vaccinations_smoothed_per_million people_fully_vaccinated_per_hundred total_boosters_per_hundred stringency_index date 2022-03-08 38934.286 0.65 2.748 621 65.24 28.89 53.24 2022-03-09 36641.429 0.66 2.699 601 65.25 28.91 53.24 2022-03-10 36330.429 0.69 2.613 583 65.27 28.94 53.24 2022-03-11 36104.714 0.71 2.580 557 65.29 28.97 53.24 2022-03-12 35464.143 0.71 2.561 540 65.30 28.99 53.24 # number of rows in the data nrows = data_clean.shape[0] The day-to-day case counts can be regarded as a time series and the data needs to be prepared before training a supervised learning model. For LSTM, the data is composed of inputs and outputs, and the inputs can be seen as a moving window blocks consisting of the feature values to predict the outcome. The size of the window is a free parameter that the user must optimize.\n# Convert the data to numpy values np_data_unscaled = np.array(data_clean) np_data = np.reshape(np_data_unscaled, (nrows, -1)) # ensure all data is float values = values.astype('float64') # Transform the data by scaling each feature to a range between 0 and 1 scaler = MinMaxScaler() np_data_scaled = scaler.fit_transform(np_data_unscaled) # Creating a separate scaler that works on a single column for scaling predictions scaler_pred = MinMaxScaler() df_cases = pd.DataFrame(data_clean_ext['new_cases_smoothed']) np_cases_scaled = scaler_pred.fit_transform(df_cases) In LSTM methodology, it is required to reshape the input to be a 3D tensor of samples, time steps, and features. This is more important when we are fitting the model later.\n# Set the sequence length - this is the timeframe used to make a single prediction sequence_length = 31 # rolling window size # Prediction Index index_cases = dataset.columns.get_loc(\u0026quot;new_cases_smoothed\u0026quot;) # Split the training data into train and train data sets # As a first step, we get the number of rows to train the model on 80% of the data train_data_len = math.ceil(np_data_scaled.shape[0] * 0.8) # Create the training and test data train_data = np_data_scaled[0:train_data_len, :] test_data = np_data_scaled[train_data_len - sequence_length:, :] # The RNN needs data with the format of [samples, time steps, features] # Here, we create N samples, sequence_length time steps per sample, and 6 features def partition_dataset(sequence_length, data): x, y = [], [] data_len = data.shape[0] for i in range(sequence_length, data_len): x.append(data[i-sequence_length:i,:]) #contains sequence_length values 0-sequence_length * columsn y.append(data[i, index_cases]) #contains the prediction values for validation, for single-step prediction # Convert the x and y to numpy arrays x = np.array(x) y = np.array(y) return x, y # Generate training data and test data x_train, y_train = partition_dataset(sequence_length, train_data) x_test, y_test = partition_dataset(sequence_length, test_data) # Configure the neural network model model = Sequential() # Model with n_neurons = inputshape Timestamps, each with x_train.shape[2] variables n_neurons = x_train.shape[1] * x_train.shape[2] model.add(LSTM(n_neurons, return_sequences=False, input_shape=(x_train.shape[1], x_train.shape[2]))) model.add(Dense(1)) # Check-points and early stopping parameters make our modeling easier from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping # Compiling the LSTM model.compile(optimizer = 'adam', loss = 'mean_squared_error') # Specfy the file and file path for the best model checkpoint_path = 'my_best_model.hdf5' checkpoint = ModelCheckpoint(filepath=checkpoint_path, monitor='val_loss', verbose=1, save_best_only=True, mode='min') earlystopping = EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=True, verbose =0) callbacks = [checkpoint, earlystopping] # Training the model epochs = 300 batch_size = 20 history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test), callbacks = callbacks, verbose = 0) # Load the best model from tensorflow.keras.models import load_model model_from_saved_checkpoint = load_model(checkpoint_path) # Plot training \u0026amp; validation loss values plt.figure(figsize=(16,7)) plt.plot(history.history['loss'], label='train') plt.plot(history.history['val_loss'], label='test') plt.legend() plt.show() # Get the predicted values y_pred_scaled = model_from_saved_checkpoint.predict(x_test) # Unscale the predicted values y_pred = scaler_pred.inverse_transform(y_pred_scaled) # reshape y_test_unscaled = scaler_pred.inverse_transform(y_test.reshape(-1, 1)) # Mean Absolute Error (MAE) MAE = mean_absolute_error(y_test_unscaled, y_pred) print(f'Median Absolute Error (MAE): {np.round(MAE, 2)}') # Mean Absolute Percentage Error (MAPE) MAPE = np.mean((np.abs(np.subtract(y_test_unscaled, y_pred)/ y_test_unscaled))) * 100 print(f'Mean Absolute Percentage Error (MAPE): {np.round(MAPE, 2)} %') # Median Absolute Percentage Error (MDAPE) MDAPE = np.median((np.abs(np.subtract(y_test_unscaled, y_pred)/ y_test_unscaled)) ) * 100 print(f'Median Absolute Percentage Error (MDAPE): {np.round(MDAPE, 2)} %') # Plot of the true and predicted case counts plt.plot(y_test_unscaled, label='True') plt.plot(y_pred, label='LSTM') plt.title(\u0026quot;LSTM's_Prediction\u0026quot;) plt.xlabel('Time steps') plt.ylabel('Cases') plt.legend() plt.show() # New data frame for predicting the next day count new_df = data_clean[-sequence_length:] # gets the last N days N = sequence_length # Get the values of the last N day cases counts # scale the data to be values between 0 and 1 last_N_days = new_df[-sequence_length:].values last_N_days_scaled = scaler.transform(last_N_days) # Create an empty list and Append past N days X_test_new = [] X_test_new.append(last_N_days_scaled) # Convert the X_test data set to a numpy array and reshape the data pred_cases_scaled = model_from_saved_checkpoint.predict(np.array(X_test_new)) pred_cases_unscaled = scaler_pred.inverse_transform(pred_cases_scaled.reshape(-1, 1)) # Print last price, predicted price, and change percent for the next day cases_today = np.round(new_df['new_cases_smoothed'][-1]) predicted_cases = np.round(pred_cases_unscaled.ravel()[0]) change_percent = np.round(100 - (cases_today * 100)/predicted_cases) # Code used to produce this article in jupyter notebook in hugo academic blog post !jupyter nbconvert covid_analysis.ipynb --to markdown --NbConvertApp.output_files_dir=. !cat covid_analysis.md | tee -a index.md !rm covid_analysis.md ","date":1647993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647993600,"objectID":"290915bf36768f5fbd9b8dae910b59e0","permalink":"/2022/03/23/how-to-predict-covid-case-counts-using-machine-learning-models/","publishdate":"2022-03-23T00:00:00Z","relpermalink":"/2022/03/23/how-to-predict-covid-case-counts-using-machine-learning-models/","section":"post","summary":"It would be nice to predict the number of positive covid cases depending on past cases evolution. Regression models based on recurrent neural networks (RNNs) are proven to identify patterns in time series data and this allows us to make accurate short-term predictions.","tags":[],"title":"How to predict covid case counts using machine learning models?","type":"post"},{"authors":["Deepak Bastola"],"categories":["Machine Learning","Data Science","Prediction"],"content":"It would be nice to predict the number of positive covid cases depending on past cases evolution. Regression models based on recurrent neural networks (RNNs) are proven to identify patterns in time series data and this allows us to make accurate short-term predictions.\nThe model used in the following example is based on long-term short-term memory (LSTM) model that uses more than one features to make informed predictions. LSTMs are recurrent neural networks that avoid the vanishing gradient problem prevalent in feed-forward type of algorithms by imposing filtering mechanisms in the gates using a technique known as back-propagation.\nThe following set of codes loads all the required Python libraries, packages, and subroutines required for LSTM modeling. This blog post is just intended to give a high level summary of how to realize a covid case count prediction in the United States using some convenient features readily available.\n# Import various libraries and routines needed for computation import math import pandas as pd import numpy as np import tensorflow as tf import matplotlib.pyplot as plt import keras.backend as K from math import sqrt from numpy import concatenate from matplotlib import pyplot from pandas import read_csv, DataFrame from sklearn.preprocessing import MinMaxScaler, LabelEncoder from sklearn.metrics import mean_squared_error, mean_absolute_error from keras.models import Sequential from keras.layers import Dense, Dropout, LSTM from keras.callbacks import EarlyStopping from datetime import date, timedelta, datetime # Read in the data file that has relevant features df = pd.read_csv('covid_final.csv') dataset = df.set_index(['date']) # Drop the last 10 row as they are incomplete dataset.drop(dataset.tail(10).index, inplace = True) values = dataset.values # Store the indexes (i.e., dates) date_index = dataset.index # Clean up the dataset more for predictions and inverse transformations (Re-scaling) data_clean = dataset.copy() data_clean_ext = dataset.copy() data_clean_ext['new_cases_predictions'] = data_clean_ext['new_cases_smoothed'] data_clean.tail() new_cases_smoothed reproduction_rate new_tests_smoothed_per_thousand new_vaccinations_smoothed_per_million people_fully_vaccinated_per_hundred total_boosters_per_hundred stringency_index date 2022-03-08 38934.286 0.65 2.748 621 65.24 28.89 53.24 2022-03-09 36641.429 0.66 2.699 601 65.25 28.91 53.24 2022-03-10 36330.429 0.69 2.613 583 65.27 28.94 53.24 2022-03-11 36104.714 0.71 2.580 557 65.29 28.97 53.24 2022-03-12 35464.143 0.71 2.561 540 65.30 28.99 53.24 # number of rows in the data nrows = data_clean.shape[0] The day-to-day case counts can be regarded as a time series and the data needs to be prepared before training a supervised learning model. For LSTM, the data is composed of inputs and outputs, and the inputs can be seen as a moving window blocks consisting of the feature values to predict the outcome. The size of the window is a free parameter that the user must optimize.\n# Convert the data to numpy values np_data_unscaled = np.array(data_clean) np_data = np.reshape(np_data_unscaled, (nrows, -1)) # ensure all data is float values = values.astype('float64') # Transform the data by scaling each feature to a range between 0 and 1 scaler = MinMaxScaler() np_data_scaled = scaler.fit_transform(np_data_unscaled) # Creating a separate scaler that works on a single column for scaling predictions scaler_pred = MinMaxScaler() df_cases = pd.DataFrame(data_clean_ext['new_cases_smoothed']) np_cases_scaled = scaler_pred.fit_transform(df_cases) In LSTM methodology, it is required to reshape the input to be a 3D tensor of samples, time steps, and features. This is more important when we are fitting the model later.\n# Set the sequence length - this is the timeframe used to make a single prediction sequence_length = 31 # rolling window size # Prediction Index index_cases = dataset.columns.get_loc(\u0026quot;new_cases_smoothed\u0026quot;) # Split the training data into train and train data sets # As a first step, we get the number of rows to train the model on 80% of the data train_data_len = math.ceil(np_data_scaled.shape[0] * 0.8) # Create the training and test data train_data = np_data_scaled[0:train_data_len, :] test_data = np_data_scaled[train_data_len - sequence_length:, :] # The RNN needs data with the format of [samples, time steps, features] # Here, we create N samples, sequence_length time steps per sample, and 6 features def partition_dataset(sequence_length, data): x, y = [], [] data_len = data.shape[0] for i in range(sequence_length, data_len): x.append(data[i-sequence_length:i,:]) #contains sequence_length values 0-sequence_length * columsn y.append(data[i, index_cases]) #contains the prediction values for validation, for single-step prediction # Convert the x and y to numpy arrays x = np.array(x) y = np.array(y) return x, y # Generate training data and test data x_train, y_train = partition_dataset(sequence_length, train_data) x_test, y_test = partition_dataset(sequence_length, test_data) # Configure the neural network model model = Sequential() # Model with n_neurons = inputshape Timestamps, each with x_train.shape[2] variables n_neurons = x_train.shape[1] * x_train.shape[2] model.add(LSTM(n_neurons, return_sequences=False, input_shape=(x_train.shape[1], x_train.shape[2]))) model.add(Dense(1)) # Check-points and early stopping parameters make our modeling easier from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping # Compiling the LSTM model.compile(optimizer = 'adam', loss = 'mean_squared_error') # Specfy the file and file path for the best model checkpoint_path = 'my_best_model.hdf5' checkpoint = ModelCheckpoint(filepath=checkpoint_path, monitor='val_loss', verbose=1, save_best_only=True, mode='min') earlystopping = EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=True, verbose =0) callbacks = [checkpoint, earlystopping] # Training the model epochs = 300 batch_size = 20 history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test), callbacks = callbacks, verbose = 0) # Load the best model from tensorflow.keras.models import load_model model_from_saved_checkpoint = load_model(checkpoint_path) # Plot training \u0026amp; validation loss values plt.figure(figsize=(16,7)) plt.plot(history.history['loss'], label='train') plt.plot(history.history['val_loss'], label='test') plt.legend() plt.show() # Get the predicted values y_pred_scaled = model_from_saved_checkpoint.predict(x_test) # Unscale the predicted values y_pred = scaler_pred.inverse_transform(y_pred_scaled) # reshape y_test_unscaled = scaler_pred.inverse_transform(y_test.reshape(-1, 1)) # Mean Absolute Error (MAE) MAE = mean_absolute_error(y_test_unscaled, y_pred) print(f'Median Absolute Error (MAE): {np.round(MAE, 2)}') # Mean Absolute Percentage Error (MAPE) MAPE = np.mean((np.abs(np.subtract(y_test_unscaled, y_pred)/ y_test_unscaled))) * 100 print(f'Mean Absolute Percentage Error (MAPE): {np.round(MAPE, 2)} %') # Median Absolute Percentage Error (MDAPE) MDAPE = np.median((np.abs(np.subtract(y_test_unscaled, y_pred)/ y_test_unscaled)) ) * 100 print(f'Median Absolute Percentage Error (MDAPE): {np.round(MDAPE, 2)} %') # Plot of the true and predicted case counts plt.plot(y_test_unscaled, label='True') plt.plot(y_pred, label='LSTM') plt.title(\u0026quot;LSTM's_Prediction\u0026quot;) plt.xlabel('Time steps') plt.ylabel('Cases') plt.legend() plt.show() # New data frame for predicting the next day count new_df = data_clean[-sequence_length:] # gets the last N days N = sequence_length # Get the values of the last N day cases counts # scale the data to be values between 0 and 1 last_N_days = new_df[-sequence_length:].values last_N_days_scaled = scaler.transform(last_N_days) # Create an empty list and Append past N days X_test_new = [] X_test_new.append(last_N_days_scaled) # Convert the X_test data set to a numpy array and reshape the data pred_cases_scaled = model_from_saved_checkpoint.predict(np.array(X_test_new)) pred_cases_unscaled = scaler_pred.inverse_transform(pred_cases_scaled.reshape(-1, 1)) # Print last price, predicted price, and change percent for the next day cases_today = np.round(new_df['new_cases_smoothed'][-1]) predicted_cases = np.round(pred_cases_unscaled.ravel()[0]) change_percent = np.round(100 - (cases_today * 100)/predicted_cases) # Code used to produce this article in jupyter notebook in hugo academic blog post !jupyter nbconvert covid_analysis.ipynb --to markdown --NbConvertApp.output_files_dir=. !cat covid_analysis.md | tee -a index.md !rm covid_analysis.md ","date":1647993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647993600,"objectID":"7e1ea18d4ddc5427adc686c2741da844","permalink":"/project/internal-project/jupyter-lstm/","publishdate":"2022-03-23T00:00:00Z","relpermalink":"/project/internal-project/jupyter-lstm/","section":"project","summary":"It would be nice to predict the number of positive covid cases depending on past cases evolution. Regression models based on recurrent neural networks (RNNs) are proven to identify patterns in time series data and this allows us to make accurate short-term predictions.","tags":null,"title":"Predicting COVID Case Counts with Machine Learning","type":"project"},{"authors":["Deepak Bastola"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne **Two** Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}} Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Deepak Bastola","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Deepak Bastola","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]